
// ----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v6.13.6135.32130 (NJsonSchema v5.2.6135.25892) (http://NSwag.org)
// </auto-generated>
// ----------------------

/* tslint:disable:curly */
/* tslint:disable:max-line-length */
/* tslint:disable:class-name */
/* tslint:disable:no-trailing-whitespace */

import { WebapiHttpService } from '@app/shared/api/http/webapi-http.service';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Response } from '@angular/http';

export class EnumMetadata {
    name: string;
}
let enumMetadataProviders: Function[] = [];

export class UnexpectedResponseError extends Error {
  constructor(public message: string, public response: Response) {
    super(message || 'error_no_callback_for_the_received_http_status');
  }
}



@Injectable()
export class UserClient  {
        constructor(protected http: WebapiHttpService) {
    }
    current(): Observable<UserDto> {
        let obs = this.http.get(`api/user/current`).map((response) => {
            if (response.status === 200) {
                let result200: UserDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? UserDto.fromJS(resultData200) : new UserDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class UserClientOperationsMeta {

    public static currentUrl(): string {
        return `api/user/current`;
    }
}

@Injectable()
export class AccountClient  {
        constructor(protected http: WebapiHttpService) {
    }
    searchInAd(filter: AdSearchFilterDto): Observable<AdSearchResultDto[]> {
        let obs = this.http.search(`api/Account`, filter).map((response) => {
            if (response.status === 200) {
                let result200: AdSearchResultDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(AdSearchResultDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    adUserPhoto(adLogin: string): Observable<any> {
        let obs = this.http.get(`api/Account/AdUserPhoto?adLogin=${adLogin}`).map((response) => {
            if (response.status === 200) {
                let result200: any = null;
                let resultData200: any = null;
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getAdUser(adLogin: string): Observable<AdUserDto> {
        let obs = this.http.get(`api/Account/GetAdUser?adLogin=${adLogin}`).map((response) => {
            if (response.status === 200) {
                let result200: AdUserDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AdUserDto.fromJS(resultData200) : new AdUserDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getPersonLogins(personId: string): Observable<UserPersonLogingsDto> {
        let obs = this.http.get(`api/Account?personId=${personId}`).map((response) => {
            if (response.status === 200) {
                let result200: UserPersonLogingsDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? UserPersonLogingsDto.fromJS(resultData200) : new UserPersonLogingsDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    login(dto: UserLoginDto): Observable<any> {
        let obs = this.http.post(`api/Account/Login`, dto).map((response) => {
            if (response.status === 200) {
                let result200: any = null;
                let resultData200: any = null;
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    logout(): Observable<any> {
        let obs = this.http.post(`api/Account/Logout`, null).map((response) => {
            if (response.status === 200) {
                let result200: any = null;
                let resultData200: any = null;
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    register(dto: UserRegisterDto): Observable<any> {
        let obs = this.http.post(`api/Account/Register`, dto).map((response) => {
            if (response.status === 200) {
                let result200: any = null;
                let resultData200: any = null;
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    createUser(dto: CreateUserDto): Observable<string> {
        let obs = this.http.post(`api/Account/CreateUser`, dto).map((response) => {
            if (response.status === 200) {
                let result200: string = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    createAdUser(dto: CreateAdUserDto): Observable<string> {
        let obs = this.http.post(`api/Account/CreateAdUser`, dto).map((response) => {
            if (response.status === 200) {
                let result200: string = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class AccountClientOperationsMeta {

    public static searchInAdUrl(filter: AdSearchFilterDto): string {
        return `api/Account`;
    }

    public static adUserPhotoUrl(adLogin: string): string {
        return `api/Account/AdUserPhoto?adLogin=${adLogin}`;
    }

    public static getAdUserUrl(adLogin: string): string {
        return `api/Account/GetAdUser?adLogin=${adLogin}`;
    }

    public static getPersonLoginsUrl(personId: string): string {
        return `api/Account?personId=${personId}`;
    }

    public static loginUrl(dto: UserLoginDto): string {
        return `api/Account/Login`;
    }

    public static logoutUrl(): string {
        return `api/Account/Logout`;
    }

    public static registerUrl(dto: UserRegisterDto): string {
        return `api/Account/Register`;
    }

    public static createUserUrl(dto: CreateUserDto): string {
        return `api/Account/CreateUser`;
    }

    public static createAdUserUrl(dto: CreateAdUserDto): string {
        return `api/Account/CreateAdUser`;
    }
}

@Injectable()
export class PermissionClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getPermissions(filter: PermissionFilterDto): Observable<PageOfPermissionEnumDto> {
        let obs = this.http.search(`api/Permission`, filter).map((response) => {
            if (response.status === 200) {
                let result200: PageOfPermissionEnumDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? PageOfPermissionEnumDto.fromJS(resultData200) : new PageOfPermissionEnumDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getGroupPermissions(filter: UserRoleGroupFilterDto): Observable<UserRoleGroupDto[]> {
        let obs = this.http.search(`api/web/permission/group`, filter).map((response) => {
            if (response.status === 200) {
                let result200: UserRoleGroupDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(UserRoleGroupDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    createUserRole(dto: CreateUserRoleDto): Observable<UserRoleDetailedDto> {
        let obs = this.http.post(`api/web/permission`, dto).map((response) => {
            if (response.status === 200) {
                let result200: UserRoleDetailedDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? UserRoleDetailedDto.fromJS(resultData200) : new UserRoleDetailedDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getRoles(filter: RoleFilterDto): Observable<RoleDto[]> {
        let obs = this.http.search(`api/web/permission/roles`, filter).map((response) => {
            if (response.status === 200) {
                let result200: RoleDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(RoleDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getUserRoles(filter: UserRoleDetailedFilterDto): Observable<PageOfUserRoleDetailedDto> {
        let obs = this.http.search(`api/web/permission/userroles`, filter).map((response) => {
            if (response.status === 200) {
                let result200: PageOfUserRoleDetailedDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? PageOfUserRoleDetailedDto.fromJS(resultData200) : new PageOfUserRoleDetailedDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    deleteUserRole(id: string): Observable<void> {
        let obs = this.http.delete(`api/web/permission/userrole/${id}`).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class PermissionClientOperationsMeta {

    public static getPermissionsUrl(filter: PermissionFilterDto): string {
        return `api/Permission`;
    }

    public static getGroupPermissionsUrl(filter: UserRoleGroupFilterDto): string {
        return `api/web/permission/group`;
    }

    public static createUserRoleUrl(dto: CreateUserRoleDto): string {
        return `api/web/permission`;
    }

    public static getRolesUrl(filter: RoleFilterDto): string {
        return `api/web/permission/roles`;
    }

    public static getUserRolesUrl(filter: UserRoleDetailedFilterDto): string {
        return `api/web/permission/userroles`;
    }

    public static deleteUserRoleUrl(id: string): string {
        return `api/web/permission/userrole/${id}`;
    }
}

@Injectable()
export class CollegialBodiesClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getCollegialBodies(): Observable<PageOfCollegialBodyDetailsLocalizedDto> {
        let obs = this.http.get(`api/web/collegialbodies`).map((response) => {
            if (response.status === 200) {
                let result200: PageOfCollegialBodyDetailsLocalizedDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? PageOfCollegialBodyDetailsLocalizedDto.fromJS(resultData200) : new PageOfCollegialBodyDetailsLocalizedDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    addProtocolMeetingTemplate(id: string): Observable<void> {
        let obs = this.http.post(`api/web/collegialBodies/${id}/protocolTemplate`, null).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class CollegialBodiesClientOperationsMeta {

    public static getCollegialBodiesUrl(): string {
        return `api/web/collegialbodies`;
    }

    public static addProtocolMeetingTemplateUrl(id: string): string {
        return `api/web/collegialBodies/${id}/protocolTemplate`;
    }
}

@Injectable()
export class EmployeesClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getEmployee(id: string): Observable<EmployeeLocalizedDto> {
        let obs = this.http.get(`api/web/employees/${id}`).map((response) => {
            if (response.status === 200) {
                let result200: EmployeeLocalizedDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? EmployeeLocalizedDto.fromJS(resultData200) : new EmployeeLocalizedDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getMultilingualEmployee(id: string): Observable<EmployeeDto> {
        let obs = this.http.get(`api/web/employees/${id}/multilingual`).map((response) => {
            if (response.status === 200) {
                let result200: EmployeeDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? EmployeeDto.fromJS(resultData200) : new EmployeeDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getEmployees(dto: EmployeesFilterDto): Observable<PageOfEmployeeLocalizedDto> {
        let obs = this.http.search(`api/web/employees`, dto).map((response) => {
            if (response.status === 200) {
                let result200: PageOfEmployeeLocalizedDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? PageOfEmployeeLocalizedDto.fromJS(resultData200) : new PageOfEmployeeLocalizedDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    createEmployee(dto: CreateEmployeeDto): Observable<EmployeeDto> {
        let obs = this.http.post(`api/web/employees`, dto).map((response) => {
            if (response.status === 200) {
                let result200: EmployeeDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? EmployeeDto.fromJS(resultData200) : new EmployeeDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    editEmployee(dto: EditEmloyeeDto): Observable<EmployeeDto> {
        let obs = this.http.put(`api/web/employees`, dto).map((response) => {
            if (response.status === 200) {
                let result200: EmployeeDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? EmployeeDto.fromJS(resultData200) : new EmployeeDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    downloadEmployeePicture(id: string): Observable<any> {
        let obs = this.http.get(`api/web/employees/${id}/picture`).map((response) => {
            if (response.status === 200) {
                let result200: any = null;
                let resultData200: any = null;
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    setPicture(id: string): Observable<UploadDto> {
        let obs = this.http.post(`api/web/employees/${id}/picture`, null).map((response) => {
            if (response.status === 200) {
                let result200: UploadDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? UploadDto.fromJS(resultData200) : new UploadDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class EmployeesClientOperationsMeta {

    public static getEmployeeUrl(id: string): string {
        return `api/web/employees/${id}`;
    }

    public static getMultilingualEmployeeUrl(id: string): string {
        return `api/web/employees/${id}/multilingual`;
    }

    public static getEmployeesUrl(dto: EmployeesFilterDto): string {
        return `api/web/employees`;
    }

    public static createEmployeeUrl(dto: CreateEmployeeDto): string {
        return `api/web/employees`;
    }

    public static editEmployeeUrl(dto: EditEmloyeeDto): string {
        return `api/web/employees`;
    }

    public static downloadEmployeePictureUrl(id: string): string {
        return `api/web/employees/${id}/picture`;
    }

    public static setPictureUrl(id: string): string {
        return `api/web/employees/${id}/picture`;
    }
}

@Injectable()
export class CompaniesClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getCompanies(): Observable<PageOfCompanyDto> {
        let obs = this.http.get(`api/Companies`).map((response) => {
            if (response.status === 200) {
                let result200: PageOfCompanyDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? PageOfCompanyDto.fromJS(resultData200) : new PageOfCompanyDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class CompaniesClientOperationsMeta {

    public static getCompaniesUrl(): string {
        return `api/Companies`;
    }
}

@Injectable()
export class IssueMaterialsClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getIssueMaterials(issueId: string, location: string): Observable<MaterialsFolderContentsDto> {
        let obs = this.http.get(`api/web/issues/${issueId}/materials?location=${location}`).map((response) => {
            if (response.status === 200) {
                let result200: MaterialsFolderContentsDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? MaterialsFolderContentsDto.fromJS(resultData200) : new MaterialsFolderContentsDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    createMaterials(issueId: string, location: string): Observable<IssueMaterialLocalizedDto[]> {
        let obs = this.http.post(`api/web/issues/${issueId}/materials?location=${location}`, null).map((response) => {
            if (response.status === 200) {
                let result200: IssueMaterialLocalizedDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(IssueMaterialLocalizedDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getIssuePresentations(issueId: string): Observable<IssueMaterialLocalizedDto[]> {
        let obs = this.http.get(`api/web/issues/${issueId}/presentations`).map((response) => {
            if (response.status === 200) {
                let result200: IssueMaterialLocalizedDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(IssueMaterialLocalizedDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getIssueDecisionProjects(issueId: string): Observable<DecisionProjectDto[]> {
        let obs = this.http.get(`api/web/issues/${issueId}/decisionProjects`).map((response) => {
            if (response.status === 200) {
                let result200: DecisionProjectDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(DecisionProjectDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    changeType(issueId: string, id: string, dto: EditIssueMaterialTypeDto): Observable<void> {
        let obs = this.http.post(`api/web/issues/${issueId}/materials/${id}`, dto).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    download(id: string): Observable<any> {
        let obs = this.http.get(`api/web/materials/${id}`).map((response) => {
            if (response.status === 200) {
                let result200: any = null;
                let resultData200: any = null;
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    delete(id: string): Observable<any> {
        let obs = this.http.delete(`api/web/materials/${id}`).map((response) => {
            if (response.status === 200) {
                let result200: any = null;
                let resultData200: any = null;
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getMaterialVersions(id: string): Observable<IssueMaterialVersionLocalizedDto[]> {
        let obs = this.http.get(`api/web/materials/${id}/versions`).map((response) => {
            if (response.status === 200) {
                let result200: IssueMaterialVersionLocalizedDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(IssueMaterialVersionLocalizedDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    addMaterialVersion(id: string): Observable<IssueMaterialVersionLocalizedDto> {
        let obs = this.http.post(`api/web/materials/${id}/versions`, null).map((response) => {
            if (response.status === 200) {
                let result200: IssueMaterialVersionLocalizedDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? IssueMaterialVersionLocalizedDto.fromJS(resultData200) : new IssueMaterialVersionLocalizedDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    downloadVersion(id: string, v: number): Observable<any> {
        let obs = this.http.get(`api/web/materials/${id}/versions/${v}`).map((response) => {
            if (response.status === 200) {
                let result200: any = null;
                let resultData200: any = null;
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class IssueMaterialsClientOperationsMeta {

    public static getIssueMaterialsUrl(issueId: string, location: string): string {
        return `api/web/issues/${issueId}/materials?location=${location}`;
    }

    public static createMaterialsUrl(issueId: string, location: string): string {
        return `api/web/issues/${issueId}/materials?location=${location}`;
    }

    public static getIssuePresentationsUrl(issueId: string): string {
        return `api/web/issues/${issueId}/presentations`;
    }

    public static getIssueDecisionProjectsUrl(issueId: string): string {
        return `api/web/issues/${issueId}/decisionProjects`;
    }

    public static changeTypeUrl(issueId: string, id: string, dto: EditIssueMaterialTypeDto): string {
        return `api/web/issues/${issueId}/materials/${id}`;
    }

    public static downloadUrl(id: string): string {
        return `api/web/materials/${id}`;
    }

    public static deleteUrl(id: string): string {
        return `api/web/materials/${id}`;
    }

    public static getMaterialVersionsUrl(id: string): string {
        return `api/web/materials/${id}/versions`;
    }

    public static addMaterialVersionUrl(id: string): string {
        return `api/web/materials/${id}/versions`;
    }

    public static downloadVersionUrl(id: string, v: number): string {
        return `api/web/materials/${id}/versions/${v}`;
    }
}

@Injectable()
export class IssuesClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getIssues(dto: IssuesFilterDto): Observable<PageOfIssueLocalizedDto> {
        let obs = this.http.search(`api/web/issues`, dto).map((response) => {
            if (response.status === 200) {
                let result200: PageOfIssueLocalizedDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? PageOfIssueLocalizedDto.fromJS(resultData200) : new PageOfIssueLocalizedDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    createIssue(dto: CreateIssueDto): Observable<IssueDto> {
        let obs = this.http.post(`api/web/issues`, dto).map((response) => {
            if (response.status === 200) {
                let result200: IssueDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? IssueDto.fromJS(resultData200) : new IssueDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getIssue(id: string): Observable<IssueDto> {
        let obs = this.http.get(`api/web/issues/${id}`).map((response) => {
            if (response.status === 200) {
                let result200: IssueDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? IssueDto.fromJS(resultData200) : new IssueDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    editIssue(id: string, dto: EditIssueDto): Observable<IssueDto> {
        let obs = this.http.put(`api/web/issues/${id}`, dto).map((response) => {
            if (response.status === 200) {
                let result200: IssueDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? IssueDto.fromJS(resultData200) : new IssueDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    deleteIssue(id: string): Observable<void> {
        let obs = this.http.delete(`api/web/issues/${id}`).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    shareIssue(id: string, share: IssueShareDto): Observable<void> {
        let obs = this.http.post(`api/web/issues/${id}/share`, share).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    moveIssueState(id: string, state: IssueTransitionDto): Observable<IssueDto> {
        let obs = this.http.post(`api/web/issues/${id}/status/${state}`, null).map((response) => {
            if (response.status === 200) {
                let result200: IssueDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? IssueDto.fromJS(resultData200) : new IssueDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    deleteIssueShare(id: string, employeeId: string): Observable<void> {
        let obs = this.http.delete(`api/web/issues/${id}/share/${employeeId}`).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getShareIssueEmployees(id: string): Observable<EmployeeLocalizedDto[]> {
        let obs = this.http.get(`api/web/issues/${id}/share/employees`).map((response) => {
            if (response.status === 200) {
                let result200: EmployeeLocalizedDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(EmployeeLocalizedDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class IssuesClientOperationsMeta {

    public static getIssuesUrl(dto: IssuesFilterDto): string {
        return `api/web/issues`;
    }

    public static createIssueUrl(dto: CreateIssueDto): string {
        return `api/web/issues`;
    }

    public static getIssueUrl(id: string): string {
        return `api/web/issues/${id}`;
    }

    public static editIssueUrl(id: string, dto: EditIssueDto): string {
        return `api/web/issues/${id}`;
    }

    public static deleteIssueUrl(id: string): string {
        return `api/web/issues/${id}`;
    }

    public static shareIssueUrl(id: string, share: IssueShareDto): string {
        return `api/web/issues/${id}/share`;
    }

    public static moveIssueStateUrl(id: string, state: IssueTransitionDto): string {
        return `api/web/issues/${id}/status/${state}`;
    }

    public static deleteIssueShareUrl(id: string, employeeId: string): string {
        return `api/web/issues/${id}/share/${employeeId}`;
    }

    public static getShareIssueEmployeesUrl(id: string): string {
        return `api/web/issues/${id}/share/employees`;
    }
}

@Injectable()
export class LabelsClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getLabels(dto: LabelsFilterDto): Observable<PageOfLabelDto> {
        let obs = this.http.search(`api/Labels`, dto).map((response) => {
            if (response.status === 200) {
                let result200: PageOfLabelDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? PageOfLabelDto.fromJS(resultData200) : new PageOfLabelDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    create(dto: CreateLabelDto): Observable<LabelDto> {
        let obs = this.http.post(`api/Labels`, dto).map((response) => {
            if (response.status === 200) {
                let result200: LabelDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? LabelDto.fromJS(resultData200) : new LabelDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class LabelsClientOperationsMeta {

    public static getLabelsUrl(dto: LabelsFilterDto): string {
        return `api/Labels`;
    }

    public static createUrl(dto: CreateLabelDto): string {
        return `api/Labels`;
    }
}

@Injectable()
export class AgendaClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getAgenda(meetingId: string): Observable<AgendaDto> {
        let obs = this.http.get(`api/web/meetings/${meetingId}/agenda`).map((response) => {
            if (response.status === 200) {
                let result200: AgendaDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaDto.fromJS(resultData200) : new AgendaDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    addAgendaItem(meetingId: string, item: IssueLocalizedDto): Observable<AgendaItemDetailsDto> {
        let obs = this.http.post(`api/web/meetings/${meetingId}/agenda`, item).map((response) => {
            if (response.status === 200) {
                let result200: AgendaItemDetailsDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaItemDetailsDto.fromJS(resultData200) : new AgendaItemDetailsDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getAgendaItem(meetingId: string, issueId: string): Observable<AgendaItemDetailsDto> {
        let obs = this.http.get(`api/web/meetings/${meetingId}/agenda/${issueId}`).map((response) => {
            if (response.status === 200) {
                let result200: AgendaItemDetailsDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaItemDetailsDto.fromJS(resultData200) : new AgendaItemDetailsDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    moveAgendaItem(meetingId: string, issueId: string, item: AgendaItemDetailsDto): Observable<AgendaItemDetailsDto> {
        let obs = this.http.put(`api/web/meetings/${meetingId}/agenda/${issueId}`, item).map((response) => {
            if (response.status === 200) {
                let result200: AgendaItemDetailsDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaItemDetailsDto.fromJS(resultData200) : new AgendaItemDetailsDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    removeAgendaItem(meetingId: string, issueId: string): Observable<AgendaDto> {
        let obs = this.http.delete(`api/web/meetings/${meetingId}/agenda/${issueId}`).map((response) => {
            if (response.status === 200) {
                let result200: AgendaDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaDto.fromJS(resultData200) : new AgendaDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    moveAgendaItemState(meetingId: string, issueId: string, workflowAction: AgendaItemWorkflowActionDto): Observable<AgendaItemDetailsDto> {
        let obs = this.http.post(`api/web/meetings/${meetingId}/agenda/${issueId}/${workflowAction}`, null).map((response) => {
            if (response.status === 200) {
                let result200: AgendaItemDetailsDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaItemDetailsDto.fromJS(resultData200) : new AgendaItemDetailsDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    addAgendaItemInvitedPerson(meetingId: string, issueId: string, dto: EmployeeLocalizedDto): Observable<AgendaItemParticipantDto> {
        let obs = this.http.post(`api/web/meetings/${meetingId}/agenda/${issueId}/invitedPersons`, dto).map((response) => {
            if (response.status === 200) {
                let result200: AgendaItemParticipantDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaItemParticipantDto.fromJS(resultData200) : new AgendaItemParticipantDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    removeAgendaItemInvitedPerson(meetingId: string, issueId: string, employeeId: string): Observable<void> {
        let obs = this.http.delete(`api/web/meetings/${meetingId}/agenda/${issueId}/invitedPersons/${employeeId}`).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    addAgendaItemSpeaker(meetingId: string, issueId: string, dto: EmployeeLocalizedDto): Observable<AgendaItemParticipantDto> {
        let obs = this.http.post(`api/web/meetings/${meetingId}/agenda/${issueId}/speakers`, dto).map((response) => {
            if (response.status === 200) {
                let result200: AgendaItemParticipantDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaItemParticipantDto.fromJS(resultData200) : new AgendaItemParticipantDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    removeAgendaItemSpeaker(meetingId: string, issueId: string, employeeId: string): Observable<void> {
        let obs = this.http.delete(`api/web/meetings/${meetingId}/agenda/${issueId}/speakers/${employeeId}`).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    addAgendaItemAttendee(meetingId: string, issueId: string, employee: EmployeeLocalizedDto): Observable<AgendaItemParticipantDto> {
        let obs = this.http.post(`api/web/meetings/${meetingId}/agenda/${issueId}/attendees`, employee).map((response) => {
            if (response.status === 200) {
                let result200: AgendaItemParticipantDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaItemParticipantDto.fromJS(resultData200) : new AgendaItemParticipantDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    removeAgendaItemAttendee(meetingId: string, issueId: string, employeeId: string): Observable<AgendaItemParticipantDto> {
        let obs = this.http.delete(`api/web/meetings/${meetingId}/agenda/${issueId}/attendees/${employeeId}`).map((response) => {
            if (response.status === 200) {
                let result200: AgendaItemParticipantDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? AgendaItemParticipantDto.fromJS(resultData200) : new AgendaItemParticipantDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class AgendaClientOperationsMeta {

    public static getAgendaUrl(meetingId: string): string {
        return `api/web/meetings/${meetingId}/agenda`;
    }

    public static addAgendaItemUrl(meetingId: string, item: IssueLocalizedDto): string {
        return `api/web/meetings/${meetingId}/agenda`;
    }

    public static getAgendaItemUrl(meetingId: string, issueId: string): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}`;
    }

    public static moveAgendaItemUrl(meetingId: string, issueId: string, item: AgendaItemDetailsDto): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}`;
    }

    public static removeAgendaItemUrl(meetingId: string, issueId: string): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}`;
    }

    public static moveAgendaItemStateUrl(meetingId: string, issueId: string, workflowAction: AgendaItemWorkflowActionDto): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}/${workflowAction}`;
    }

    public static addAgendaItemInvitedPersonUrl(meetingId: string, issueId: string, dto: EmployeeLocalizedDto): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}/invitedPersons`;
    }

    public static removeAgendaItemInvitedPersonUrl(meetingId: string, issueId: string, employeeId: string): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}/invitedPersons/${employeeId}`;
    }

    public static addAgendaItemSpeakerUrl(meetingId: string, issueId: string, dto: EmployeeLocalizedDto): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}/speakers`;
    }

    public static removeAgendaItemSpeakerUrl(meetingId: string, issueId: string, employeeId: string): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}/speakers/${employeeId}`;
    }

    public static addAgendaItemAttendeeUrl(meetingId: string, issueId: string, employee: EmployeeLocalizedDto): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}/attendees`;
    }

    public static removeAgendaItemAttendeeUrl(meetingId: string, issueId: string, employeeId: string): string {
        return `api/web/meetings/${meetingId}/agenda/${issueId}/attendees/${employeeId}`;
    }
}

@Injectable()
export class MeetingsClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getMeetings(dto: MeetingsFilterDto): Observable<PageOfMeetingLocalizedDto> {
        let obs = this.http.search(`api/web/meetings`, dto).map((response) => {
            if (response.status === 200) {
                let result200: PageOfMeetingLocalizedDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? PageOfMeetingLocalizedDto.fromJS(resultData200) : new PageOfMeetingLocalizedDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    createMeeting(dto: CreateMeetingDto): Observable<MeetingDto> {
        let obs = this.http.post(`api/web/meetings`, dto).map((response) => {
            if (response.status === 200) {
                let result200: MeetingDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? MeetingDto.fromJS(resultData200) : new MeetingDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getMeeting(id: string): Observable<MeetingDto> {
        let obs = this.http.get(`api/web/meetings/${id}`).map((response) => {
            if (response.status === 200) {
                let result200: MeetingDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? MeetingDto.fromJS(resultData200) : new MeetingDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    editMeeting(id: string, dto: EditMeetingDto): Observable<MeetingDto> {
        let obs = this.http.put(`api/web/meetings/${id}`, dto).map((response) => {
            if (response.status === 200) {
                let result200: MeetingDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? MeetingDto.fromJS(resultData200) : new MeetingDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    deleteMeeting(id: string): Observable<void> {
        let obs = this.http.delete(`api/web/meetings/${id}`).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    moveMeetingState(meetingId: string, workflowAction: MeetingWorkflowActionDto): Observable<MeetingDto> {
        let obs = this.http.post(`api/web/meetings/${meetingId}/workflow/${workflowAction}`, null).map((response) => {
            if (response.status === 200) {
                let result200: MeetingDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? MeetingDto.fromJS(resultData200) : new MeetingDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getMeetingParticipants(id: string): Observable<MeetingParticipantDto[]> {
        let obs = this.http.get(`api/web/meetings/${id}/participants`).map((response) => {
            if (response.status === 200) {
                let result200: MeetingParticipantDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(MeetingParticipantDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    addMeetingInvitedPerson(id: string, employee: EmployeeLocalizedDto): Observable<MeetingParticipantDto> {
        let obs = this.http.post(`api/web/meetings/${id}/invitedPersons`, employee).map((response) => {
            if (response.status === 200) {
                let result200: MeetingParticipantDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? MeetingParticipantDto.fromJS(resultData200) : new MeetingParticipantDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    removeMeetingInvitedPerson(id: string, employeeId: string): Observable<MeetingParticipantDto> {
        let obs = this.http.delete(`api/web/meetings/${id}/invitedPersons/${employeeId}`).map((response) => {
            if (response.status === 200) {
                let result200: MeetingParticipantDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? MeetingParticipantDto.fromJS(resultData200) : new MeetingParticipantDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    acceptDecisionProject(meetingId: string, materialId: string): Observable<void> {
        let obs = this.http.post(`api/web/meetings/${meetingId}/decisionProjects/${materialId}/accept`, null).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    rejectDecisionProject(meetingId: string, materialId: string): Observable<void> {
        let obs = this.http.post(`api/web/meetings/${meetingId}/decisionProjects/${materialId}/reject`, null).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    formMeetingProtocol(id: string): Observable<void> {
        let obs = this.http.post(`api/web/meetings/${id}/protocol`, null).map((response) => {
            if (response.status === 200 || response.status === 204) {
                return;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    download(id: string): Observable<any> {
        let obs = this.http.get(`api/web/meetings/${id}/protocol`).map((response) => {
            if (response.status === 200) {
                let result200: any = null;
                let resultData200: any = null;
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 !== undefined ? resultData200 : null;
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class MeetingsClientOperationsMeta {

    public static getMeetingsUrl(dto: MeetingsFilterDto): string {
        return `api/web/meetings`;
    }

    public static createMeetingUrl(dto: CreateMeetingDto): string {
        return `api/web/meetings`;
    }

    public static getMeetingUrl(id: string): string {
        return `api/web/meetings/${id}`;
    }

    public static editMeetingUrl(id: string, dto: EditMeetingDto): string {
        return `api/web/meetings/${id}`;
    }

    public static deleteMeetingUrl(id: string): string {
        return `api/web/meetings/${id}`;
    }

    public static moveMeetingStateUrl(meetingId: string, workflowAction: MeetingWorkflowActionDto): string {
        return `api/web/meetings/${meetingId}/workflow/${workflowAction}`;
    }

    public static getMeetingParticipantsUrl(id: string): string {
        return `api/web/meetings/${id}/participants`;
    }

    public static addMeetingInvitedPersonUrl(id: string, employee: EmployeeLocalizedDto): string {
        return `api/web/meetings/${id}/invitedPersons`;
    }

    public static removeMeetingInvitedPersonUrl(id: string, employeeId: string): string {
        return `api/web/meetings/${id}/invitedPersons/${employeeId}`;
    }

    public static acceptDecisionProjectUrl(meetingId: string, materialId: string): string {
        return `api/web/meetings/${meetingId}/decisionProjects/${materialId}/accept`;
    }

    public static rejectDecisionProjectUrl(meetingId: string, materialId: string): string {
        return `api/web/meetings/${meetingId}/decisionProjects/${materialId}/reject`;
    }

    public static formMeetingProtocolUrl(id: string): string {
        return `api/web/meetings/${id}/protocol`;
    }

    public static downloadUrl(id: string): string {
        return `api/web/meetings/${id}/protocol`;
    }
}

@Injectable()
export class HoldingsClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getHoldings(): Observable<HoldingDto[]> {
        let obs = this.http.get(`api/Holdings`).map((response) => {
            if (response.status === 200) {
                let result200: HoldingDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(HoldingDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class HoldingsClientOperationsMeta {

    public static getHoldingsUrl(): string {
        return `api/Holdings`;
    }
}

@Injectable()
export class VotingsClient  {
        constructor(protected http: WebapiHttpService) {
    }
    getVotings(dto: VotingsFilterDto): Observable<PageOfVotingDto> {
        let obs = this.http.search(`api/web/votings`, dto).map((response) => {
            if (response.status === 200) {
                let result200: PageOfVotingDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? PageOfVotingDto.fromJS(resultData200) : new PageOfVotingDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    createVoting(dto: CreateVotingDto): Observable<VotingDto> {
        let obs = this.http.post(`api/web/votings`, dto).map((response) => {
            if (response.status === 200) {
                let result200: VotingDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? VotingDto.fromJS(resultData200) : new VotingDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    getVoting(id: string): Observable<VotingDto> {
        let obs = this.http.get(`api/web/votings/${id}`).map((response) => {
            if (response.status === 200) {
                let result200: VotingDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? VotingDto.fromJS(resultData200) : new VotingDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    endVoting(id: string): Observable<VotingDto> {
        let obs = this.http.post(`api/web/votings/${id}/end`, null).map((response) => {
            if (response.status === 200) {
                let result200: VotingDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? VotingDto.fromJS(resultData200) : new VotingDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    votes(id: string): Observable<VoteDto[]> {
        let obs = this.http.get(`api/web/votings/${id}/votes`).map((response) => {
            if (response.status === 200) {
                let result200: VoteDto[] = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(VoteDto.fromJS(item));
                    }
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }
    vote(id: string, dto: CreateVoteDto): Observable<VoteDto> {
        let obs = this.http.post(`api/web/votings/${id}/votes`, dto).map((response) => {
            if (response.status === 200) {
                let result200: VoteDto = null;
                let resultData200: any = response.json();
                if (resultData200 != null && resultData200 !== '') {
                    result200 = resultData200 ? VoteDto.fromJS(resultData200) : new VoteDto();
                }
                return result200;
            } else {
                throw new UnexpectedResponseError(null, response);
            }
        });
        return obs;
    }

}

export class VotingsClientOperationsMeta {

    public static getVotingsUrl(dto: VotingsFilterDto): string {
        return `api/web/votings`;
    }

    public static createVotingUrl(dto: CreateVotingDto): string {
        return `api/web/votings`;
    }

    public static getVotingUrl(id: string): string {
        return `api/web/votings/${id}`;
    }

    public static endVotingUrl(id: string): string {
        return `api/web/votings/${id}/end`;
    }

    public static votesUrl(id: string): string {
        return `api/web/votings/${id}/votes`;
    }

    public static voteUrl(id: string, dto: CreateVoteDto): string {
        return `api/web/votings/${id}/votes`;
    }
}


export class UserDto {
    id: string;
    userId: string;
    pictureUrl: string;
    firstName: string;
    lastName: string;
    middleName: string;
    username: string;
    
    
    static fromJS(data: any): UserDto {

        return new UserDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.userId = data['userId'] !== undefined ? data['userId'] : null;
            this.pictureUrl = data['pictureUrl'] !== undefined ? data['pictureUrl'] : null;
            this.firstName = data['firstName'] !== undefined ? data['firstName'] : null;
            this.lastName = data['lastName'] !== undefined ? data['lastName'] : null;
            this.middleName = data['middleName'] !== undefined ? data['middleName'] : null;
            this.username = data['username'] !== undefined ? data['username'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['userId'] = this.userId !== undefined ? this.userId : null;
        data['pictureUrl'] = this.pictureUrl !== undefined ? this.pictureUrl : null;
        data['firstName'] = this.firstName !== undefined ? this.firstName : null;
        data['lastName'] = this.lastName !== undefined ? this.lastName : null;
        data['middleName'] = this.middleName !== undefined ? this.middleName : null;
        data['username'] = this.username !== undefined ? this.username : null;

        
        return data;
    }
}

export class AdSearchFilterDto {
    name: string;
    
    
    static fromJS(data: any): AdSearchFilterDto {

        return new AdSearchFilterDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.name = data['name'] !== undefined ? data['name'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['name'] = this.name !== undefined ? this.name : null;

        
        return data;
    }
}

export class AdSearchResultDto {
    adLogin: string;
    firstName: string;
    lastName: string;
    middleName: string;
    hasPhoto: boolean;
    
    
    static fromJS(data: any): AdSearchResultDto {

        return new AdSearchResultDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.adLogin = data['adLogin'] !== undefined ? data['adLogin'] : null;
            this.firstName = data['firstName'] !== undefined ? data['firstName'] : null;
            this.lastName = data['lastName'] !== undefined ? data['lastName'] : null;
            this.middleName = data['middleName'] !== undefined ? data['middleName'] : null;
            this.hasPhoto = data['hasPhoto'] !== undefined ? data['hasPhoto'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['adLogin'] = this.adLogin !== undefined ? this.adLogin : null;
        data['firstName'] = this.firstName !== undefined ? this.firstName : null;
        data['lastName'] = this.lastName !== undefined ? this.lastName : null;
        data['middleName'] = this.middleName !== undefined ? this.middleName : null;
        data['hasPhoto'] = this.hasPhoto !== undefined ? this.hasPhoto : null;

        
        return data;
    }
}

export class AdUserDto {
    adLogin: string;
    firstName: string;
    lastName: string;
    middleName: string;
    email: string;
    hasPhoto: boolean;
    userPerson: UserPersonDto;
    
    
    static fromJS(data: any): AdUserDto {

        return new AdUserDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.adLogin = data['adLogin'] !== undefined ? data['adLogin'] : null;
            this.firstName = data['firstName'] !== undefined ? data['firstName'] : null;
            this.lastName = data['lastName'] !== undefined ? data['lastName'] : null;
            this.middleName = data['middleName'] !== undefined ? data['middleName'] : null;
            this.email = data['email'] !== undefined ? data['email'] : null;
            this.hasPhoto = data['hasPhoto'] !== undefined ? data['hasPhoto'] : null;
            this.userPerson = data['userPerson'] ? UserPersonDto.fromJS(data['userPerson']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['adLogin'] = this.adLogin !== undefined ? this.adLogin : null;
        data['firstName'] = this.firstName !== undefined ? this.firstName : null;
        data['lastName'] = this.lastName !== undefined ? this.lastName : null;
        data['middleName'] = this.middleName !== undefined ? this.middleName : null;
        data['email'] = this.email !== undefined ? this.email : null;
        data['hasPhoto'] = this.hasPhoto !== undefined ? this.hasPhoto : null;
        data['userPerson'] = this.userPerson ? this.userPerson.toJS() : null;

        
        return data;
    }
}

export class UserPersonDto {
    userId: string;
    person: PersonRefDto;
    
    
    static fromJS(data: any): UserPersonDto {

        return new UserPersonDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.userId = data['userId'] !== undefined ? data['userId'] : null;
            this.person = data['person'] ? PersonRefDto.fromJS(data['person']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['userId'] = this.userId !== undefined ? this.userId : null;
        data['person'] = this.person ? this.person.toJS() : null;

        
        return data;
    }
}

export class PersonRefDto {
    id: string;
    
    
    static fromJS(data: any): PersonRefDto {

        return new PersonRefDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export class UserPersonLogingsDto extends UserPersonDto {
    logins: { [key: string]: string; };
    
    
    static fromJS(data: any): UserPersonLogingsDto {

        return new UserPersonLogingsDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.logins = null;
            if (data['logins']) {
                this.logins = {};
                for (let key in data['logins']) {
                    if (data['logins'].hasOwnProperty(key))
                        this.logins[key] = data['logins'][key] !== undefined ? data['logins'][key] : {};
                }
            }

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        if (this.logins) {
            data['logins'] = {};
            for (let key in this.logins) {
                if (this.logins.hasOwnProperty(key))
                    data['logins'][key] = this.logins[key] !== undefined ? this.logins[key] : null;
            }
        }

        super.toJS(data);
        return data;
    }
}

export class UserLoginDto {
    username: string;
    password: string;
    rememberMe: boolean;
    
    
    static fromJS(data: any): UserLoginDto {

        return new UserLoginDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.username = data['username'] !== undefined ? data['username'] : null;
            this.password = data['password'] !== undefined ? data['password'] : null;
            this.rememberMe = data['rememberMe'] !== undefined ? data['rememberMe'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['username'] = this.username !== undefined ? this.username : null;
        data['password'] = this.password !== undefined ? this.password : null;
        data['rememberMe'] = this.rememberMe !== undefined ? this.rememberMe : null;

        
        return data;
    }
}

export class UserRegisterDto {
    username: string;
    password: string;
    employeeId: string;
    
    
    static fromJS(data: any): UserRegisterDto {

        return new UserRegisterDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.username = data['username'] !== undefined ? data['username'] : null;
            this.password = data['password'] !== undefined ? data['password'] : null;
            this.employeeId = data['employeeId'] !== undefined ? data['employeeId'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['username'] = this.username !== undefined ? this.username : null;
        data['password'] = this.password !== undefined ? this.password : null;
        data['employeeId'] = this.employeeId !== undefined ? this.employeeId : null;

        
        return data;
    }
}

export class CreateUserDto {
    person: PersonRefDto;
    username: string;
    password: string;
    
    
    static fromJS(data: any): CreateUserDto {

        return new CreateUserDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.person = data['person'] ? PersonRefDto.fromJS(data['person']) : null;
            this.username = data['username'] !== undefined ? data['username'] : null;
            this.password = data['password'] !== undefined ? data['password'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['person'] = this.person ? this.person.toJS() : null;
        data['username'] = this.username !== undefined ? this.username : null;
        data['password'] = this.password !== undefined ? this.password : null;

        
        return data;
    }
}

export class CreateAdUserDto {
    person: PersonRefDto;
    adLogin: string;
    
    
    static fromJS(data: any): CreateAdUserDto {

        return new CreateAdUserDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.person = data['person'] ? PersonRefDto.fromJS(data['person']) : null;
            this.adLogin = data['adLogin'] !== undefined ? data['adLogin'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['person'] = this.person ? this.person.toJS() : null;
        data['adLogin'] = this.adLogin !== undefined ? this.adLogin : null;

        
        return data;
    }
}

export class PermissionFilterDto {
    isChildSearch: boolean;
    issueId: string;
    meetingId: string;
    collegialBodyId: string;
    companyId: string;
    holdingId: string;
    permission: PermissionEnumDto;
    permissionGroup: PermissionGroupEnumDto;
    
    
    static fromJS(data: any): PermissionFilterDto {

        return new PermissionFilterDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.isChildSearch = data['isChildSearch'] !== undefined ? data['isChildSearch'] : null;
            this.issueId = data['issueId'] !== undefined ? data['issueId'] : null;
            this.meetingId = data['meetingId'] !== undefined ? data['meetingId'] : null;
            this.collegialBodyId = data['collegialBodyId'] !== undefined ? data['collegialBodyId'] : null;
            this.companyId = data['companyId'] !== undefined ? data['companyId'] : null;
            this.holdingId = data['holdingId'] !== undefined ? data['holdingId'] : null;
            this.permission = data['permission'] !== undefined ? data['permission'] : null;
            this.permissionGroup = data['permissionGroup'] !== undefined ? data['permissionGroup'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['isChildSearch'] = this.isChildSearch !== undefined ? this.isChildSearch : null;
        data['issueId'] = this.issueId !== undefined ? this.issueId : null;
        data['meetingId'] = this.meetingId !== undefined ? this.meetingId : null;
        data['collegialBodyId'] = this.collegialBodyId !== undefined ? this.collegialBodyId : null;
        data['companyId'] = this.companyId !== undefined ? this.companyId : null;
        data['holdingId'] = this.holdingId !== undefined ? this.holdingId : null;
        data['permission'] = this.permission !== undefined ? this.permission : null;
        data['permissionGroup'] = this.permissionGroup !== undefined ? this.permissionGroup : null;

        
        return data;
    }
}

export enum PermissionEnumDto {

        CreateIssue = <any>'CreateIssue',
        ViewIssue = <any>'ViewIssue',
        EditIssue = <any>'EditIssue',
        DeleteIssue = <any>'DeleteIssue',
        WorkWithMyIssue = <any>'WorkWithMyIssue',
        CreateMeeting = <any>'CreateMeeting',
        ViewMeeting = <any>'ViewMeeting',
        EditMeeting = <any>'EditMeeting',
        DeleteMeeting = <any>'DeleteMeeting',
        CanVote = <any>'CanVote',
        CanApplyVeto = <any>'CanApplyVeto',
        Admin = <any>'Admin',
        CreatePerson = <any>'CreatePerson',
        EditPerson = <any>'EditPerson',
        EditUserRole = <any>'EditUserRole',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === PermissionEnumDto) {
        return {
            name: 'PermissionEnumDto'
        };
    };
    return undefined;
});

export enum PermissionGroupEnumDto {

        Issue = <any>'Issue',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === PermissionGroupEnumDto) {
        return {
            name: 'PermissionGroupEnumDto'
        };
    };
    return undefined;
});

export class PageOfPermissionEnumDto {
    pageNum: number;
    pageSize: number;
    items: PermissionEnumDto[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfPermissionEnumDto {

        return new PageOfPermissionEnumDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(item);
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item);
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class UserRoleGroupFilterDto {

    
    
    static fromJS(data: any): UserRoleGroupFilterDto {

        return new UserRoleGroupFilterDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        

        
        return data;
    }
}

export class UserRoleGroupDto {
    holding: HoldingRefDto;
    company: CompanyRefDto;
    collegialBody: CollegialBodyRefDto;
    permission: PermissionEnumDto;
    permissionLevel: PermissionLevelDto;
    
    
    static fromJS(data: any): UserRoleGroupDto {

        return new UserRoleGroupDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.holding = data['holding'] ? HoldingRefDto.fromJS(data['holding']) : null;
            this.company = data['company'] ? CompanyRefDto.fromJS(data['company']) : null;
            this.collegialBody = data['collegialBody'] ? CollegialBodyRefDto.fromJS(data['collegialBody']) : null;
            this.permission = data['permission'] !== undefined ? data['permission'] : null;
            this.permissionLevel = data['permissionLevel'] !== undefined ? data['permissionLevel'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['holding'] = this.holding ? this.holding.toJS() : null;
        data['company'] = this.company ? this.company.toJS() : null;
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['permission'] = this.permission !== undefined ? this.permission : null;
        data['permissionLevel'] = this.permissionLevel !== undefined ? this.permissionLevel : null;

        
        return data;
    }
}

export class HoldingRefDto {
    id: string;
    
    
    static fromJS(data: any): HoldingRefDto {

        return new HoldingRefDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export class CompanyRefDto {
    id: string;
    
    
    static fromJS(data: any): CompanyRefDto {

        return new CompanyRefDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export class CollegialBodyRefDto {
    id: string;
    
    
    static fromJS(data: any): CollegialBodyRefDto {

        return new CollegialBodyRefDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export enum PermissionLevelDto {

        Root = <any>'Root',
        Holding = <any>'Holding',
        Company = <any>'Company',
        CollegialBody = <any>'CollegialBody',
        Meeting = <any>'Meeting',
        Issue = <any>'Issue',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === PermissionLevelDto) {
        return {
            name: 'PermissionLevelDto'
        };
    };
    return undefined;
});

export class CreateUserRoleDto {
    userId: string;
    role: RoleRefDto;
    collegialBody: CollegialBodyRefDto;
    company: CompanyRefDto;
    holding: HoldingRefDto;
    
    
    static fromJS(data: any): CreateUserRoleDto {

        return new CreateUserRoleDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.userId = data['userId'] !== undefined ? data['userId'] : null;
            this.role = data['role'] ? RoleRefDto.fromJS(data['role']) : null;
            this.collegialBody = data['collegialBody'] ? CollegialBodyRefDto.fromJS(data['collegialBody']) : null;
            this.company = data['company'] ? CompanyRefDto.fromJS(data['company']) : null;
            this.holding = data['holding'] ? HoldingRefDto.fromJS(data['holding']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['userId'] = this.userId !== undefined ? this.userId : null;
        data['role'] = this.role ? this.role.toJS() : null;
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['company'] = this.company ? this.company.toJS() : null;
        data['holding'] = this.holding ? this.holding.toJS() : null;

        
        return data;
    }
}

export class RoleRefDto {
    id: string;
    
    
    static fromJS(data: any): RoleRefDto {

        return new RoleRefDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export class UserRoleDetailedDto {
    id: string;
    userId: string;
    role: RoleDto;
    holding: UserRoleObjectDto;
    company: UserRoleObjectDto;
    collegialBody: UserRoleObjectDto;
    meeting: UserRoleObjectDto;
    issue: UserRoleObjectDto;
    
    
    static fromJS(data: any): UserRoleDetailedDto {

        return new UserRoleDetailedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.userId = data['userId'] !== undefined ? data['userId'] : null;
            this.role = data['role'] ? RoleDto.fromJS(data['role']) : null;
            this.holding = data['holding'] ? UserRoleObjectDto.fromJS(data['holding']) : null;
            this.company = data['company'] ? UserRoleObjectDto.fromJS(data['company']) : null;
            this.collegialBody = data['collegialBody'] ? UserRoleObjectDto.fromJS(data['collegialBody']) : null;
            this.meeting = data['meeting'] ? UserRoleObjectDto.fromJS(data['meeting']) : null;
            this.issue = data['issue'] ? UserRoleObjectDto.fromJS(data['issue']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['userId'] = this.userId !== undefined ? this.userId : null;
        data['role'] = this.role ? this.role.toJS() : null;
        data['holding'] = this.holding ? this.holding.toJS() : null;
        data['company'] = this.company ? this.company.toJS() : null;
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['meeting'] = this.meeting ? this.meeting.toJS() : null;
        data['issue'] = this.issue ? this.issue.toJS() : null;

        
        return data;
    }
}

export class RoleDto extends RoleRefDto {
    name: string;
    permissionLevel: PermissionLevelDto;
    
    
    static fromJS(data: any): RoleDto {

        return new RoleDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.name = data['name'] !== undefined ? data['name'] : null;
            this.permissionLevel = data['permissionLevel'] !== undefined ? data['permissionLevel'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['name'] = this.name !== undefined ? this.name : null;
        data['permissionLevel'] = this.permissionLevel !== undefined ? this.permissionLevel : null;

        super.toJS(data);
        return data;
    }
}

export class UserRoleObjectDto {
    id: string;
    displayName: string;
    
    
    static fromJS(data: any): UserRoleObjectDto {

        return new UserRoleObjectDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.displayName = data['displayName'] !== undefined ? data['displayName'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['displayName'] = this.displayName !== undefined ? this.displayName : null;

        
        return data;
    }
}

export class RoleFilterDto {
    permissionLevels: PermissionLevelDto[];
    
    
    static fromJS(data: any): RoleFilterDto {

        return new RoleFilterDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.permissionLevels = null;
            if (data['permissionLevels'] && data['permissionLevels'].constructor === Array) {
                this.permissionLevels = [];
                for (let item of data['permissionLevels'])
                    this.permissionLevels.push(item);
            }

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        if (this.permissionLevels && this.permissionLevels.constructor === Array) {
            data['permissionLevels'] = [];
            for (let item of this.permissionLevels)
                data['permissionLevels'].push(item);
        }

        
        return data;
    }
}

export class PageFilterDto {
    page: number;
    size: number;
    
    
    static fromJS(data: any): PageFilterDto {

        return new PageFilterDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.page = data['page'] !== undefined ? data['page'] : null;
            this.size = data['size'] !== undefined ? data['size'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['page'] = this.page !== undefined ? this.page : null;
        data['size'] = this.size !== undefined ? this.size : null;

        
        return data;
    }
}

export class UserRoleDetailedFilterDto extends PageFilterDto {
    userId: string;
    permissionLevels: PermissionLevelDto[];
    
    
    static fromJS(data: any): UserRoleDetailedFilterDto {

        return new UserRoleDetailedFilterDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.userId = data['userId'] !== undefined ? data['userId'] : null;
            this.permissionLevels = null;
            if (data['permissionLevels'] && data['permissionLevels'].constructor === Array) {
                this.permissionLevels = [];
                for (let item of data['permissionLevels'])
                    this.permissionLevels.push(item);
            }

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['userId'] = this.userId !== undefined ? this.userId : null;
        if (this.permissionLevels && this.permissionLevels.constructor === Array) {
            data['permissionLevels'] = [];
            for (let item of this.permissionLevels)
                data['permissionLevels'].push(item);
        }

        super.toJS(data);
        return data;
    }
}

export class PageOfUserRoleDetailedDto {
    pageNum: number;
    pageSize: number;
    items: UserRoleDetailedDto[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfUserRoleDetailedDto {

        return new PageOfUserRoleDetailedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(UserRoleDetailedDto.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class PageOfCollegialBodyDetailsLocalizedDto {
    pageNum: number;
    pageSize: number;
    items: CollegialBodyDetailsLocalizedDto[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfCollegialBodyDetailsLocalizedDto {

        return new PageOfCollegialBodyDetailsLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(CollegialBodyDetailsLocalizedDto.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class CollegialBodyDetailsLocalizedDto {
    id: string;
    name: string;
    company: CompanyRefDto;
    holding: HoldingRefDto;
    
    
    static fromJS(data: any): CollegialBodyDetailsLocalizedDto {

        return new CollegialBodyDetailsLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.name = data['name'] !== undefined ? data['name'] : null;
            this.company = data['company'] ? CompanyRefDto.fromJS(data['company']) : null;
            this.holding = data['holding'] ? HoldingRefDto.fromJS(data['holding']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['name'] = this.name !== undefined ? this.name : null;
        data['company'] = this.company ? this.company.toJS() : null;
        data['holding'] = this.holding ? this.holding.toJS() : null;

        
        return data;
    }
}

export class EmployeeLocalizedDto {
    id: string;
    info: EmployeeInfoLocalizedDto;
    
    
    static fromJS(data: any): EmployeeLocalizedDto {

        return new EmployeeLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.info = data['info'] ? EmployeeInfoLocalizedDto.fromJS(data['info']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['info'] = this.info ? this.info.toJS() : null;

        
        return data;
    }
}

export class EmployeeInfoLocalizedDto {
    firstName: string;
    lastName: string;
    middleName: string;
    profileUrl: string;
    
    
    static fromJS(data: any): EmployeeInfoLocalizedDto {

        return new EmployeeInfoLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.firstName = data['firstName'] !== undefined ? data['firstName'] : null;
            this.lastName = data['lastName'] !== undefined ? data['lastName'] : null;
            this.middleName = data['middleName'] !== undefined ? data['middleName'] : null;
            this.profileUrl = data['profileUrl'] !== undefined ? data['profileUrl'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['firstName'] = this.firstName !== undefined ? this.firstName : null;
        data['lastName'] = this.lastName !== undefined ? this.lastName : null;
        data['middleName'] = this.middleName !== undefined ? this.middleName : null;
        data['profileUrl'] = this.profileUrl !== undefined ? this.profileUrl : null;

        
        return data;
    }
}

export class EmployeeDto {
    id: string;
    info: EmployeeInfoDto;
    
    
    static fromJS(data: any): EmployeeDto {

        return new EmployeeDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.info = data['info'] ? EmployeeInfoDto.fromJS(data['info']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['info'] = this.info ? this.info.toJS() : null;

        
        return data;
    }
}

export class EmployeeInfoDto {
    firstName: { [key: string]: any; };
    lastName: { [key: string]: any; };
    middleName: { [key: string]: any; };
    profileUrl: string;
    
    
    static fromJS(data: any): EmployeeInfoDto {

        return new EmployeeInfoDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.firstName = null;
            if (data['firstName']) {
                this.firstName = {};
                for (let key in data['firstName']) {
                    if (data['firstName'].hasOwnProperty(key))
                        this.firstName[key] = data['firstName'][key] !== undefined ? data['firstName'][key] : {};
                }
            }
            this.lastName = null;
            if (data['lastName']) {
                this.lastName = {};
                for (let key in data['lastName']) {
                    if (data['lastName'].hasOwnProperty(key))
                        this.lastName[key] = data['lastName'][key] !== undefined ? data['lastName'][key] : {};
                }
            }
            this.middleName = null;
            if (data['middleName']) {
                this.middleName = {};
                for (let key in data['middleName']) {
                    if (data['middleName'].hasOwnProperty(key))
                        this.middleName[key] = data['middleName'][key] !== undefined ? data['middleName'][key] : {};
                }
            }
            this.profileUrl = data['profileUrl'] !== undefined ? data['profileUrl'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        if (this.firstName) {
            data['firstName'] = {};
            for (let key in this.firstName) {
                if (this.firstName.hasOwnProperty(key))
                    data['firstName'][key] = this.firstName[key] !== undefined ? this.firstName[key] : null;
            }
        }
        if (this.lastName) {
            data['lastName'] = {};
            for (let key in this.lastName) {
                if (this.lastName.hasOwnProperty(key))
                    data['lastName'][key] = this.lastName[key] !== undefined ? this.lastName[key] : null;
            }
        }
        if (this.middleName) {
            data['middleName'] = {};
            for (let key in this.middleName) {
                if (this.middleName.hasOwnProperty(key))
                    data['middleName'][key] = this.middleName[key] !== undefined ? this.middleName[key] : null;
            }
        }
        data['profileUrl'] = this.profileUrl !== undefined ? this.profileUrl : null;

        
        return data;
    }
}

export class MultilingualTextDto {

    
    
    static fromJS(data: any): MultilingualTextDto {

        return new MultilingualTextDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {

            
            for (let property in data) {
                 if (data.hasOwnProperty(property)) {
                     this[property] = data[property];
                 }
            }
        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        

        for (let property in this) {
            if (this.hasOwnProperty(property)) {
                data[property] = this[property];
            }
        }

        
        return data;
    }
}

export class EmployeesFilterDto extends PageFilterDto {
    query: string;
    
    
    static fromJS(data: any): EmployeesFilterDto {

        return new EmployeesFilterDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.query = data['query'] !== undefined ? data['query'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['query'] = this.query !== undefined ? this.query : null;

        super.toJS(data);
        return data;
    }
}

export class PageOfEmployeeLocalizedDto {
    pageNum: number;
    pageSize: number;
    items: EmployeeLocalizedDto[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfEmployeeLocalizedDto {

        return new PageOfEmployeeLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(EmployeeLocalizedDto.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class CreateEmployeeDto {
    info: EmployeeInfoDto;
    
    
    static fromJS(data: any): CreateEmployeeDto {

        return new CreateEmployeeDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.info = data['info'] ? EmployeeInfoDto.fromJS(data['info']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['info'] = this.info ? this.info.toJS() : null;

        
        return data;
    }
}

export class EditEmloyeeDto {
    id: string;
    info: EmployeeInfoDto;
    
    
    static fromJS(data: any): EditEmloyeeDto {

        return new EditEmloyeeDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.info = data['info'] ? EmployeeInfoDto.fromJS(data['info']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['info'] = this.info ? this.info.toJS() : null;

        
        return data;
    }
}

export class UploadDto {
    id: string;
    fileName: string;
    contentType: string;
    
    
    static fromJS(data: any): UploadDto {

        return new UploadDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.fileName = data['fileName'] !== undefined ? data['fileName'] : null;
            this.contentType = data['contentType'] !== undefined ? data['contentType'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['fileName'] = this.fileName !== undefined ? this.fileName : null;
        data['contentType'] = this.contentType !== undefined ? this.contentType : null;

        
        return data;
    }
}

export class PageOfCompanyDto {
    pageNum: number;
    pageSize: number;
    items: CompanyDto[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfCompanyDto {

        return new PageOfCompanyDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(CompanyDto.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class CompanyDto extends CompanyRefDto {
    name: string;
    holding: HoldingRefDto;
    
    
    static fromJS(data: any): CompanyDto {

        return new CompanyDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.name = data['name'] !== undefined ? data['name'] : null;
            this.holding = data['holding'] ? HoldingRefDto.fromJS(data['holding']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['name'] = this.name !== undefined ? this.name : null;
        data['holding'] = this.holding ? this.holding.toJS() : null;

        super.toJS(data);
        return data;
    }
}

export class MaterialsFolderContentsDto {
    subFolders: MaterialsFolderDto[];
    materials: IssueMaterialLocalizedDto[];
    
    
    static fromJS(data: any): MaterialsFolderContentsDto {

        return new MaterialsFolderContentsDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.subFolders = null;
            if (data['subFolders'] && data['subFolders'].constructor === Array) {
                this.subFolders = [];
                for (let item of data['subFolders'])
                    this.subFolders.push(MaterialsFolderDto.fromJS(item));
            }
            this.materials = null;
            if (data['materials'] && data['materials'].constructor === Array) {
                this.materials = [];
                for (let item of data['materials'])
                    this.materials.push(IssueMaterialLocalizedDto.fromJS(item));
            }

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        if (this.subFolders && this.subFolders.constructor === Array) {
            data['subFolders'] = [];
            for (let item of this.subFolders)
                data['subFolders'].push(item.toJS());
        }
        if (this.materials && this.materials.constructor === Array) {
            data['materials'] = [];
            for (let item of this.materials)
                data['materials'].push(item.toJS());
        }

        
        return data;
    }
}

export class MaterialsFolderDto {
    name: string;
    location: string;
    
    
    static fromJS(data: any): MaterialsFolderDto {

        return new MaterialsFolderDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.name = data['name'] !== undefined ? data['name'] : null;
            this.location = data['location'] !== undefined ? data['location'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['name'] = this.name !== undefined ? this.name : null;
        data['location'] = this.location !== undefined ? this.location : null;

        
        return data;
    }
}

export class IssueMaterialLocalizedDto {
    id: string;
    type: string;
    name: string;
    location: string;
    currentVersion: IssueMaterialVersionLocalizedDto;
    
    
    static fromJS(data: any): IssueMaterialLocalizedDto {

        return new IssueMaterialLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.type = data['type'] !== undefined ? data['type'] : null;
            this.name = data['name'] !== undefined ? data['name'] : null;
            this.location = data['location'] !== undefined ? data['location'] : null;
            this.currentVersion = data['currentVersion'] ? IssueMaterialVersionLocalizedDto.fromJS(data['currentVersion']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['type'] = this.type !== undefined ? this.type : null;
        data['name'] = this.name !== undefined ? this.name : null;
        data['location'] = this.location !== undefined ? this.location : null;
        data['currentVersion'] = this.currentVersion ? this.currentVersion.toJS() : null;

        
        return data;
    }
}

export class IssueMaterialVersionLocalizedDto {
    num: number;
    fileName: string;
    createdBy: EmployeeLocalizedDto;
    createdAt: Date;
    
    
    static fromJS(data: any): IssueMaterialVersionLocalizedDto {

        return new IssueMaterialVersionLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.fileName = data['fileName'] !== undefined ? data['fileName'] : null;
            this.createdBy = data['createdBy'] ? EmployeeLocalizedDto.fromJS(data['createdBy']) : null;
            this.createdAt = data['createdAt'] ? new Date(data['createdAt'].toString()) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['num'] = this.num !== undefined ? this.num : null;
        data['fileName'] = this.fileName !== undefined ? this.fileName : null;
        data['createdBy'] = this.createdBy ? this.createdBy.toJS() : null;
        data['createdAt'] = this.createdAt ? this.createdAt.toISOString() : null;

        
        return data;
    }
}

export class DecisionProjectDto extends IssueMaterialLocalizedDto {
    bookmarksValid: boolean;
    accepted: boolean;
    
    
    static fromJS(data: any): DecisionProjectDto {

        return new DecisionProjectDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.bookmarksValid = data['bookmarksValid'] !== undefined ? data['bookmarksValid'] : null;
            this.accepted = data['accepted'] !== undefined ? data['accepted'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['bookmarksValid'] = this.bookmarksValid !== undefined ? this.bookmarksValid : null;
        data['accepted'] = this.accepted !== undefined ? this.accepted : null;

        super.toJS(data);
        return data;
    }
}

export class EditIssueMaterialTypeDto {
    type: IssueMaterialTypeDto;
    
    
    static fromJS(data: any): EditIssueMaterialTypeDto {

        return new EditIssueMaterialTypeDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.type = data['type'] !== undefined ? data['type'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['type'] = this.type !== undefined ? this.type : null;

        
        return data;
    }
}

export enum IssueMaterialTypeDto {

        DecisionProject = <any>'DecisionProject',
        Presentation = <any>'Presentation',
        Other = <any>'Other',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === IssueMaterialTypeDto) {
        return {
            name: 'IssueMaterialTypeDto'
        };
    };
    return undefined;
});

export class IssuesFilterDto extends PageFilterDto {
    collegialBodyId: string;
    title: string;
    labels: string;
    from: Date;
    to: Date;
    speaker: string;
    
    
    static fromJS(data: any): IssuesFilterDto {

        return new IssuesFilterDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.collegialBodyId = data['collegialBodyId'] !== undefined ? data['collegialBodyId'] : null;
            this.title = data['title'] !== undefined ? data['title'] : null;
            this.labels = data['labels'] !== undefined ? data['labels'] : null;
            this.from = data['from'] ? new Date(data['from'].toString()) : null;
            this.to = data['to'] ? new Date(data['to'].toString()) : null;
            this.speaker = data['speaker'] !== undefined ? data['speaker'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['collegialBodyId'] = this.collegialBodyId !== undefined ? this.collegialBodyId : null;
        data['title'] = this.title !== undefined ? this.title : null;
        data['labels'] = this.labels !== undefined ? this.labels : null;
        data['from'] = this.from ? this.from.toISOString() : null;
        data['to'] = this.to ? this.to.toISOString() : null;
        data['speaker'] = this.speaker !== undefined ? this.speaker : null;

        super.toJS(data);
        return data;
    }
}

export class PageOfIssueLocalizedDto {
    pageNum: number;
    pageSize: number;
    items: IssueLocalizedDto[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfIssueLocalizedDto {

        return new PageOfIssueLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(IssueLocalizedDto.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class IssueDetailsLocalizedDto {
    id: string;
    title: string;
    description: string;
    
    
    static fromJS(data: any): IssueDetailsLocalizedDto {

        return new IssueDetailsLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.title = data['title'] !== undefined ? data['title'] : null;
            this.description = data['description'] !== undefined ? data['description'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['title'] = this.title !== undefined ? this.title : null;
        data['description'] = this.description !== undefined ? this.description : null;

        
        return data;
    }
}

export class IssueLocalizedDto extends IssueDetailsLocalizedDto {
    collegialBody: CollegialBodyDetailsLocalizedDto;
    author: EmployeeLocalizedDto;
    labels: LabelDto[];
    status: string;
    estimate: string;
    createDate: Date;
    
    
    static fromJS(data: any): IssueLocalizedDto {

        return new IssueLocalizedDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.collegialBody = data['collegialBody'] ? CollegialBodyDetailsLocalizedDto.fromJS(data['collegialBody']) : null;
            this.author = data['author'] ? EmployeeLocalizedDto.fromJS(data['author']) : null;
            this.labels = null;
            if (data['labels'] && data['labels'].constructor === Array) {
                this.labels = [];
                for (let item of data['labels'])
                    this.labels.push(LabelDto.fromJS(item));
            }
            this.status = data['status'] !== undefined ? data['status'] : null;
            this.estimate = data['estimate'] !== undefined ? data['estimate'] : null;
            this.createDate = data['createDate'] !== undefined ? data['createDate'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['author'] = this.author ? this.author.toJS() : null;
        if (this.labels && this.labels.constructor === Array) {
            data['labels'] = [];
            for (let item of this.labels)
                data['labels'].push(item.toJS());
        }
        data['status'] = this.status !== undefined ? this.status : null;
        data['estimate'] = this.estimate !== undefined ? this.estimate : null;

        super.toJS(data);
        return data;
    }
}

export class LabelDto {
    id: string;
    name: string;
    
    
    static fromJS(data: any): LabelDto {

        return new LabelDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.name = data['name'] !== undefined ? data['name'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['name'] = this.name !== undefined ? this.name : null;

        
        return data;
    }
}

export class CreateIssueDto {
    collegialBody: CollegialBodyDetailsLocalizedDto;
    author: EmployeeLocalizedDto;
    title: { [key: string]: any; };
    description: { [key: string]: any; };
    labels: LabelDto[];
    estimate: string;
    
    
    static fromJS(data: any): CreateIssueDto {

        return new CreateIssueDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.collegialBody = data['collegialBody'] ? CollegialBodyDetailsLocalizedDto.fromJS(data['collegialBody']) : null;
            this.author = data['author'] ? EmployeeLocalizedDto.fromJS(data['author']) : null;
            this.title = null;
            if (data['title']) {
                this.title = {};
                for (let key in data['title']) {
                    if (data['title'].hasOwnProperty(key))
                        this.title[key] = data['title'][key] !== undefined ? data['title'][key] : {};
                }
            }
            this.description = null;
            if (data['description']) {
                this.description = {};
                for (let key in data['description']) {
                    if (data['description'].hasOwnProperty(key))
                        this.description[key] = data['description'][key] !== undefined ? data['description'][key] : {};
                }
            }
            this.labels = null;
            if (data['labels'] && data['labels'].constructor === Array) {
                this.labels = [];
                for (let item of data['labels'])
                    this.labels.push(LabelDto.fromJS(item));
            }
            this.estimate = data['estimate'] !== undefined ? data['estimate'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['author'] = this.author ? this.author.toJS() : null;
        if (this.title) {
            data['title'] = {};
            for (let key in this.title) {
                if (this.title.hasOwnProperty(key))
                    data['title'][key] = this.title[key] !== undefined ? this.title[key] : null;
            }
        }
        if (this.description) {
            data['description'] = {};
            for (let key in this.description) {
                if (this.description.hasOwnProperty(key))
                    data['description'][key] = this.description[key] !== undefined ? this.description[key] : null;
            }
        }
        if (this.labels && this.labels.constructor === Array) {
            data['labels'] = [];
            for (let item of this.labels)
                data['labels'].push(item.toJS());
        }
        data['estimate'] = this.estimate !== undefined ? this.estimate : null;

        
        return data;
    }
}

export class IssueDto {
    id: string;
    collegialBody: CollegialBodyDetailsLocalizedDto;
    author: EmployeeLocalizedDto;
    title: { [key: string]: any; };
    description: { [key: string]: any; };
    labels: LabelDto[];
    estimate: string;
    status: string;
    
    
    static fromJS(data: any): IssueDto {

        return new IssueDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.collegialBody = data['collegialBody'] ? CollegialBodyDetailsLocalizedDto.fromJS(data['collegialBody']) : null;
            this.author = data['author'] ? EmployeeLocalizedDto.fromJS(data['author']) : null;
            this.title = null;
            if (data['title']) {
                this.title = {};
                for (let key in data['title']) {
                    if (data['title'].hasOwnProperty(key))
                        this.title[key] = data['title'][key] !== undefined ? data['title'][key] : {};
                }
            }
            this.description = null;
            if (data['description']) {
                this.description = {};
                for (let key in data['description']) {
                    if (data['description'].hasOwnProperty(key))
                        this.description[key] = data['description'][key] !== undefined ? data['description'][key] : {};
                }
            }
            this.labels = null;
            if (data['labels'] && data['labels'].constructor === Array) {
                this.labels = [];
                for (let item of data['labels'])
                    this.labels.push(LabelDto.fromJS(item));
            }
            this.estimate = data['estimate'] !== undefined ? data['estimate'] : null;
            this.status = data['status'] !== undefined ? data['status'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['author'] = this.author ? this.author.toJS() : null;
        if (this.title) {
            data['title'] = {};
            for (let key in this.title) {
                if (this.title.hasOwnProperty(key))
                    data['title'][key] = this.title[key] !== undefined ? this.title[key] : null;
            }
        }
        if (this.description) {
            data['description'] = {};
            for (let key in this.description) {
                if (this.description.hasOwnProperty(key))
                    data['description'][key] = this.description[key] !== undefined ? this.description[key] : null;
            }
        }
        if (this.labels && this.labels.constructor === Array) {
            data['labels'] = [];
            for (let item of this.labels)
                data['labels'].push(item.toJS());
        }
        data['estimate'] = this.estimate !== undefined ? this.estimate : null;
        data['status'] = this.status !== undefined ? this.status : null;

        
        return data;
    }
}

export class EditIssueDto {
    author: EmployeeLocalizedDto;
    title: { [key: string]: any; };
    description: { [key: string]: any; };
    labels: LabelDto[];
    estimate: string;
    
    
    static fromJS(data: any): EditIssueDto {

        return new EditIssueDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.author = data['author'] ? EmployeeLocalizedDto.fromJS(data['author']) : null;
            this.title = null;
            if (data['title']) {
                this.title = {};
                for (let key in data['title']) {
                    if (data['title'].hasOwnProperty(key))
                        this.title[key] = data['title'][key] !== undefined ? data['title'][key] : {};
                }
            }
            this.description = null;
            if (data['description']) {
                this.description = {};
                for (let key in data['description']) {
                    if (data['description'].hasOwnProperty(key))
                        this.description[key] = data['description'][key] !== undefined ? data['description'][key] : {};
                }
            }
            this.labels = null;
            if (data['labels'] && data['labels'].constructor === Array) {
                this.labels = [];
                for (let item of data['labels'])
                    this.labels.push(LabelDto.fromJS(item));
            }
            this.estimate = data['estimate'] !== undefined ? data['estimate'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['author'] = this.author ? this.author.toJS() : null;
        if (this.title) {
            data['title'] = {};
            for (let key in this.title) {
                if (this.title.hasOwnProperty(key))
                    data['title'][key] = this.title[key] !== undefined ? this.title[key] : null;
            }
        }
        if (this.description) {
            data['description'] = {};
            for (let key in this.description) {
                if (this.description.hasOwnProperty(key))
                    data['description'][key] = this.description[key] !== undefined ? this.description[key] : null;
            }
        }
        if (this.labels && this.labels.constructor === Array) {
            data['labels'] = [];
            for (let item of this.labels)
                data['labels'].push(item.toJS());
        }
        data['estimate'] = this.estimate !== undefined ? this.estimate : null;

        
        return data;
    }
}

export class IssueShareDto {
    employeeId: string;
    
    
    static fromJS(data: any): IssueShareDto {

        return new IssueShareDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.employeeId = data['employeeId'] !== undefined ? data['employeeId'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['employeeId'] = this.employeeId !== undefined ? this.employeeId : null;

        
        return data;
    }
}

export enum IssueTransitionDto {

        ToReady = <any>'ToReady',
        ToPlanned = <any>'ToPlanned',
        ToInProgress = <any>'ToInProgress',
        ToModification = <any>'ToModification',
        ToClosed = <any>'ToClosed',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === IssueTransitionDto) {
        return {
            name: 'IssueTransitionDto'
        };
    };
    return undefined;
});

export class LabelsFilterDto extends PageFilterDto {
    query: string;
    
    
    static fromJS(data: any): LabelsFilterDto {

        return new LabelsFilterDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.query = data['query'] !== undefined ? data['query'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['query'] = this.query !== undefined ? this.query : null;

        super.toJS(data);
        return data;
    }
}

export class PageOfLabelDto {
    pageNum: number;
    pageSize: number;
    items: LabelDto[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfLabelDto {

        return new PageOfLabelDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(LabelDto.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class CreateLabelDto {
    name: string;
    
    
    static fromJS(data: any): CreateLabelDto {

        return new CreateLabelDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.name = data['name'] !== undefined ? data['name'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['name'] = this.name !== undefined ? this.name : null;

        
        return data;
    }
}

export class AgendaItemDetailsDto {
    issue: IssueDetailsLocalizedDto;
    order: number;
    state: string;
    outOfScope: boolean;
    protected _discriminator: string;
    
    static fromJS(data: any): AgendaItemDetailsDto {
        if (data['_discriminator'] === 'AgendaItemInPresentiaDto')
            return new AgendaItemInPresentiaDto(data);
        if (data['_discriminator'] === 'AgendaItemInAbsentiaDto')
            return new AgendaItemInAbsentiaDto(data);

        return new AgendaItemDetailsDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.issue = data['issue'] ? IssueDetailsLocalizedDto.fromJS(data['issue']) : null;
            this.order = data['order'] !== undefined ? data['order'] : null;
            this.state = data['state'] !== undefined ? data['state'] : null;
            this.outOfScope = data['outOfScope'] !== undefined ? data['outOfScope'] : null;

        }
        this._discriminator = 'AgendaItemDetailsDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data['_discriminator'] = this._discriminator;
        data['issue'] = this.issue ? this.issue.toJS() : null;
        data['order'] = this.order !== undefined ? this.order : null;
        data['state'] = this.state !== undefined ? this.state : null;
        data['outOfScope'] = this.outOfScope !== undefined ? this.outOfScope : null;

        
        return data;
    }
}

export class AgendaItemInPresentiaDto extends AgendaItemDetailsDto {
    participants: AgendaItemParticipantDto[];
    
    
    static fromJS(data: any): AgendaItemInPresentiaDto {

        return new AgendaItemInPresentiaDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.participants = null;
            if (data['participants'] && data['participants'].constructor === Array) {
                this.participants = [];
                for (let item of data['participants'])
                    this.participants.push(AgendaItemParticipantDto.fromJS(item));
            }

        }
        this._discriminator = 'AgendaItemInPresentiaDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        if (this.participants && this.participants.constructor === Array) {
            data['participants'] = [];
            for (let item of this.participants)
                data['participants'].push(item.toJS());
        }

        super.toJS(data);
        return data;
    }
}

export class AgendaItemInAbsentiaDto extends AgendaItemDetailsDto {

    
    
    static fromJS(data: any): AgendaItemInAbsentiaDto {

        return new AgendaItemInAbsentiaDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {

        }
        this._discriminator = 'AgendaItemInAbsentiaDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        

        super.toJS(data);
        return data;
    }
}

export class AgendaDto {
    meetingId: string;
    collegialBodyId: string;
    items: AgendaItemDetailsDto[];
    
    
    static fromJS(data: any): AgendaDto {

        return new AgendaDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.meetingId = data['meetingId'] !== undefined ? data['meetingId'] : null;
            this.collegialBodyId = data['collegialBodyId'] !== undefined ? data['collegialBodyId'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(AgendaItemDetailsDto.fromJS(item));
            }

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['meetingId'] = this.meetingId !== undefined ? this.meetingId : null;
        data['collegialBodyId'] = this.collegialBodyId !== undefined ? this.collegialBodyId : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }

        
        return data;
    }
}

export class AgendaItemParticipantDto extends EmployeeLocalizedDto {
    roles: AgendaItemParticipantRoleDto2[];
    presents: boolean;
    
    
    static fromJS(data: any): AgendaItemParticipantDto {

        return new AgendaItemParticipantDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.roles = null;
            if (data['roles'] && data['roles'].constructor === Array) {
                this.roles = [];
                for (let item of data['roles'])
                    this.roles.push(item);
            }
            this.presents = data['presents'] !== undefined ? data['presents'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        if (this.roles && this.roles.constructor === Array) {
            data['roles'] = [];
            for (let item of this.roles)
                data['roles'].push(item);
        }
        data['presents'] = this.presents !== undefined ? this.presents : null;

        super.toJS(data);
        return data;
    }
}

export enum AgendaItemParticipantRoleDto {

        CollegialBodyMember = <any>'CollegialBodyMember',
        InvitedOnMeeting = <any>'InvitedOnMeeting',
        Speaker = <any>'Speaker',
        InvitedOnIssue = <any>'InvitedOnIssue',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === AgendaItemParticipantRoleDto) {
        return {
            name: 'AgendaItemParticipantRoleDto'
        };
    };
    return undefined;
});

export enum AgendaItemWorkflowActionDto {

        ToModification = <any>'ToModification',
        ToConsideration = <any>'ToConsideration',
        ToVoting = <any>'ToVoting',
        ToFormalization = <any>'ToFormalization',
        ToResolved = <any>'ToResolved',
        ToRemoved = <any>'ToRemoved',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === AgendaItemWorkflowActionDto) {
        return {
            name: 'AgendaItemWorkflowActionDto'
        };
    };
    return undefined;
});

export class MeetingLocalizedDto {
    id: string;
    num: string;
    collegialBody: CollegialBodyDetailsLocalizedDto;
    agendaDueDate: Date;
    materialsDueDate: Date;
    status: string;
    hasProtocol: boolean;
    protected _discriminator: string;
    
    static fromJS(data: any): MeetingLocalizedDto {
        if (data['_discriminator'] === 'MeetingInPresentiaLocalizedDto')
            return new MeetingInPresentiaLocalizedDto(data);
        if (data['_discriminator'] === 'MeetingInAbsentiaLocalizedDto')
            return new MeetingInAbsentiaLocalizedDto(data);

        return new MeetingLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.collegialBody = data['collegialBody'] ? CollegialBodyDetailsLocalizedDto.fromJS(data['collegialBody']) : null;
            this.agendaDueDate = data['agendaDueDate'] ? new Date(data['agendaDueDate'].toString()) : null;
            this.materialsDueDate = data['materialsDueDate'] ? new Date(data['materialsDueDate'].toString()) : null;
            this.status = data['status'] !== undefined ? data['status'] : null;
            this.hasProtocol = data['hasProtocol'] !== undefined ? data['hasProtocol'] : null;

        }
        this._discriminator = 'MeetingLocalizedDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data['_discriminator'] = this._discriminator;
        data['id'] = this.id !== undefined ? this.id : null;
        data['num'] = this.num !== undefined ? this.num : null;
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['agendaDueDate'] = this.agendaDueDate ? this.agendaDueDate.toISOString() : null;
        data['materialsDueDate'] = this.materialsDueDate ? this.materialsDueDate.toISOString() : null;
        data['status'] = this.status !== undefined ? this.status : null;
        data['hasProtocol'] = this.hasProtocol !== undefined ? this.hasProtocol : null;

        
        return data;
    }
}

export class MeetingInPresentiaLocalizedDto extends MeetingLocalizedDto {
    date: Date;
    place: string;
    address: string;
    
    
    static fromJS(data: any): MeetingInPresentiaLocalizedDto {

        return new MeetingInPresentiaLocalizedDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.date = data['date'] ? new Date(data['date'].toString()) : null;
            this.place = data['place'] !== undefined ? data['place'] : null;
            this.address = data['address'] !== undefined ? data['address'] : null;

        }
        this._discriminator = 'MeetingInPresentiaLocalizedDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['date'] = this.date ? this.date.toISOString() : null;
        data['place'] = this.place !== undefined ? this.place : null;
        data['address'] = this.address !== undefined ? this.address : null;

        super.toJS(data);
        return data;
    }
}

export class MeetingInAbsentiaLocalizedDto extends MeetingLocalizedDto {
    startDate: Date;
    endDate: Date;
    
    
    static fromJS(data: any): MeetingInAbsentiaLocalizedDto {

        return new MeetingInAbsentiaLocalizedDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.startDate = data['startDate'] ? new Date(data['startDate'].toString()) : null;
            this.endDate = data['endDate'] ? new Date(data['endDate'].toString()) : null;

        }
        this._discriminator = 'MeetingInAbsentiaLocalizedDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['startDate'] = this.startDate ? this.startDate.toISOString() : null;
        data['endDate'] = this.endDate ? this.endDate.toISOString() : null;

        super.toJS(data);
        return data;
    }
}

export class CreateMeetingDto {
    collegialBody: CollegialBodyDetailsLocalizedDto;
    num: string;
    agendaDueDate: Date;
    materialsDueDate: Date;
    protected _discriminator: string;
    
    static fromJS(data: any): CreateMeetingDto {
        if (data['_discriminator'] === 'CreateMeetingInAbsentiaDto')
            return new CreateMeetingInAbsentiaDto(data);
        if (data['_discriminator'] === 'CreateMeetingInPresentiaDto')
            return new CreateMeetingInPresentiaDto(data);

        return new CreateMeetingDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.collegialBody = data['collegialBody'] ? CollegialBodyDetailsLocalizedDto.fromJS(data['collegialBody']) : null;
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.agendaDueDate = data['agendaDueDate'] ? new Date(data['agendaDueDate'].toString()) : null;
            this.materialsDueDate = data['materialsDueDate'] ? new Date(data['materialsDueDate'].toString()) : null;

        }
        this._discriminator = 'CreateMeetingDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data['_discriminator'] = this._discriminator;
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['num'] = this.num !== undefined ? this.num : null;
        data['agendaDueDate'] = this.agendaDueDate ? this.agendaDueDate.toISOString() : null;
        data['materialsDueDate'] = this.materialsDueDate ? this.materialsDueDate.toISOString() : null;

        
        return data;
    }
}

export class CreateMeetingInAbsentiaDto extends CreateMeetingDto {
    dateStart: Date;
    dateEnd: Date;
    
    
    static fromJS(data: any): CreateMeetingInAbsentiaDto {

        return new CreateMeetingInAbsentiaDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.dateStart = data['dateStart'] ? new Date(data['dateStart'].toString()) : null;
            this.dateEnd = data['dateEnd'] ? new Date(data['dateEnd'].toString()) : null;

        }
        this._discriminator = 'CreateMeetingInAbsentiaDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['dateStart'] = this.dateStart ? this.dateStart.toISOString() : null;
        data['dateEnd'] = this.dateEnd ? this.dateEnd.toISOString() : null;

        super.toJS(data);
        return data;
    }
}

export class CreateMeetingInPresentiaDto extends CreateMeetingDto {
    date: Date;
    address: { [key: string]: any; };
    place: { [key: string]: any; };
    
    
    static fromJS(data: any): CreateMeetingInPresentiaDto {

        return new CreateMeetingInPresentiaDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.date = data['date'] ? new Date(data['date'].toString()) : null;
            this.address = null;
            if (data['address']) {
                this.address = {};
                for (let key in data['address']) {
                    if (data['address'].hasOwnProperty(key))
                        this.address[key] = data['address'][key] !== undefined ? data['address'][key] : {};
                }
            }
            this.place = null;
            if (data['place']) {
                this.place = {};
                for (let key in data['place']) {
                    if (data['place'].hasOwnProperty(key))
                        this.place[key] = data['place'][key] !== undefined ? data['place'][key] : {};
                }
            }

        }
        this._discriminator = 'CreateMeetingInPresentiaDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['date'] = this.date ? this.date.toISOString() : null;
        if (this.address) {
            data['address'] = {};
            for (let key in this.address) {
                if (this.address.hasOwnProperty(key))
                    data['address'][key] = this.address[key] !== undefined ? this.address[key] : null;
            }
        }
        if (this.place) {
            data['place'] = {};
            for (let key in this.place) {
                if (this.place.hasOwnProperty(key))
                    data['place'][key] = this.place[key] !== undefined ? this.place[key] : null;
            }
        }

        super.toJS(data);
        return data;
    }
}

export class MeetingDto {
    id: string;
    collegialBody: CollegialBodyDetailsLocalizedDto;
    num: string;
    agendaDueDate: Date;
    materialsDueDate: Date;
    status: string;
    hasProtocol: boolean;
    protected _discriminator: string;
    
    static fromJS(data: any): MeetingDto {
        if (data['_discriminator'] === 'MeetingInAbsentiaDto')
            return new MeetingInAbsentiaDto(data);
        if (data['_discriminator'] === 'MeetingInPresentiaDto')
            return new MeetingInPresentiaDto(data);

        return new MeetingDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.collegialBody = data['collegialBody'] ? CollegialBodyDetailsLocalizedDto.fromJS(data['collegialBody']) : null;
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.agendaDueDate = data['agendaDueDate'] ? new Date(data['agendaDueDate'].toString()) : null;
            this.materialsDueDate = data['materialsDueDate'] ? new Date(data['materialsDueDate'].toString()) : null;
            this.status = data['status'] !== undefined ? data['status'] : null;
            this.hasProtocol = data['hasProtocol'] !== undefined ? data['hasProtocol'] : null;

        }
        this._discriminator = 'MeetingDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data['_discriminator'] = this._discriminator;
        data['id'] = this.id !== undefined ? this.id : null;
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['num'] = this.num !== undefined ? this.num : null;
        data['agendaDueDate'] = this.agendaDueDate ? this.agendaDueDate.toISOString() : null;
        data['materialsDueDate'] = this.materialsDueDate ? this.materialsDueDate.toISOString() : null;
        data['status'] = this.status !== undefined ? this.status : null;
        data['hasProtocol'] = this.hasProtocol !== undefined ? this.hasProtocol : null;

        
        return data;
    }
}

export class MeetingInAbsentiaDto extends MeetingDto {
    startDate: Date;
    endDate: Date;
    
    
    static fromJS(data: any): MeetingInAbsentiaDto {

        return new MeetingInAbsentiaDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.startDate = data['startDate'] ? new Date(data['startDate'].toString()) : null;
            this.endDate = data['endDate'] ? new Date(data['endDate'].toString()) : null;

        }
        this._discriminator = 'MeetingInAbsentiaDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['startDate'] = this.startDate ? this.startDate.toISOString() : null;
        data['endDate'] = this.endDate ? this.endDate.toISOString() : null;

        super.toJS(data);
        return data;
    }
}

export class MeetingInPresentiaDto extends MeetingDto {
    date: Date;
    address: { [key: string]: any; };
    place: { [key: string]: any; };
    invitedPersons: EmployeeLocalizedDto[];
    
    
    static fromJS(data: any): MeetingInPresentiaDto {

        return new MeetingInPresentiaDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.date = data['date'] ? new Date(data['date'].toString()) : null;
            this.address = null;
            if (data['address']) {
                this.address = {};
                for (let key in data['address']) {
                    if (data['address'].hasOwnProperty(key))
                        this.address[key] = data['address'][key] !== undefined ? data['address'][key] : {};
                }
            }
            this.place = null;
            if (data['place']) {
                this.place = {};
                for (let key in data['place']) {
                    if (data['place'].hasOwnProperty(key))
                        this.place[key] = data['place'][key] !== undefined ? data['place'][key] : {};
                }
            }
            this.invitedPersons = null;
            if (data['invitedPersons'] && data['invitedPersons'].constructor === Array) {
                this.invitedPersons = [];
                for (let item of data['invitedPersons'])
                    this.invitedPersons.push(EmployeeLocalizedDto.fromJS(item));
            }

        }
        this._discriminator = 'MeetingInPresentiaDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['date'] = this.date ? this.date.toISOString() : null;
        if (this.address) {
            data['address'] = {};
            for (let key in this.address) {
                if (this.address.hasOwnProperty(key))
                    data['address'][key] = this.address[key] !== undefined ? this.address[key] : null;
            }
        }
        if (this.place) {
            data['place'] = {};
            for (let key in this.place) {
                if (this.place.hasOwnProperty(key))
                    data['place'][key] = this.place[key] !== undefined ? this.place[key] : null;
            }
        }
        if (this.invitedPersons && this.invitedPersons.constructor === Array) {
            data['invitedPersons'] = [];
            for (let item of this.invitedPersons)
                data['invitedPersons'].push(item.toJS());
        }

        super.toJS(data);
        return data;
    }
}

export class EditMeetingDto {
    num: string;
    agendaDueDate: Date;
    materialsDueDate: Date;
    protected _discriminator: string;
    
    static fromJS(data: any): EditMeetingDto {
        if (data['_discriminator'] === 'EditMeetingInAbsentiaDto')
            return new EditMeetingInAbsentiaDto(data);
        if (data['_discriminator'] === 'EditMeetingInPresentiaDto')
            return new EditMeetingInPresentiaDto(data);

        return new EditMeetingDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.agendaDueDate = data['agendaDueDate'] ? new Date(data['agendaDueDate'].toString()) : null;
            this.materialsDueDate = data['materialsDueDate'] ? new Date(data['materialsDueDate'].toString()) : null;

        }
        this._discriminator = 'EditMeetingDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data['_discriminator'] = this._discriminator;
        data['num'] = this.num !== undefined ? this.num : null;
        data['agendaDueDate'] = this.agendaDueDate ? this.agendaDueDate.toISOString() : null;
        data['materialsDueDate'] = this.materialsDueDate ? this.materialsDueDate.toISOString() : null;

        
        return data;
    }
}

export class EditMeetingInAbsentiaDto extends EditMeetingDto {
    startDate: Date;
    endDate: Date;
    
    
    static fromJS(data: any): EditMeetingInAbsentiaDto {

        return new EditMeetingInAbsentiaDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.startDate = data['startDate'] ? new Date(data['startDate'].toString()) : null;
            this.endDate = data['endDate'] ? new Date(data['endDate'].toString()) : null;

        }
        this._discriminator = 'EditMeetingInAbsentiaDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['startDate'] = this.startDate ? this.startDate.toISOString() : null;
        data['endDate'] = this.endDate ? this.endDate.toISOString() : null;

        super.toJS(data);
        return data;
    }
}

export class EditMeetingInPresentiaDto extends EditMeetingDto {
    date: Date;
    address: { [key: string]: any; };
    place: { [key: string]: any; };
    
    
    static fromJS(data: any): EditMeetingInPresentiaDto {

        return new EditMeetingInPresentiaDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.date = data['date'] ? new Date(data['date'].toString()) : null;
            this.address = null;
            if (data['address']) {
                this.address = {};
                for (let key in data['address']) {
                    if (data['address'].hasOwnProperty(key))
                        this.address[key] = data['address'][key] !== undefined ? data['address'][key] : {};
                }
            }
            this.place = null;
            if (data['place']) {
                this.place = {};
                for (let key in data['place']) {
                    if (data['place'].hasOwnProperty(key))
                        this.place[key] = data['place'][key] !== undefined ? data['place'][key] : {};
                }
            }

        }
        this._discriminator = 'EditMeetingInPresentiaDto';
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['date'] = this.date ? this.date.toISOString() : null;
        if (this.address) {
            data['address'] = {};
            for (let key in this.address) {
                if (this.address.hasOwnProperty(key))
                    data['address'][key] = this.address[key] !== undefined ? this.address[key] : null;
            }
        }
        if (this.place) {
            data['place'] = {};
            for (let key in this.place) {
                if (this.place.hasOwnProperty(key))
                    data['place'][key] = this.place[key] !== undefined ? this.place[key] : null;
            }
        }

        super.toJS(data);
        return data;
    }
}

export class MeetingsFilterDto extends PageFilterDto {
    collegialBodyId: string;
    num: string;
    from: Date;
    to: Date;
    
    
    static fromJS(data: any): MeetingsFilterDto {

        return new MeetingsFilterDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.collegialBodyId = data['collegialBodyId'] !== undefined ? data['collegialBodyId'] : null;
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.from = data['from'] ? new Date(data['from'].toString()) : null;
            this.to = data['to'] ? new Date(data['to'].toString()) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['collegialBodyId'] = this.collegialBodyId !== undefined ? this.collegialBodyId : null;
        data['num'] = this.num !== undefined ? this.num : null;
        data['from'] = this.from ? this.from.toISOString() : null;
        data['to'] = this.to ? this.to.toISOString() : null;

        super.toJS(data);
        return data;
    }
}

export class PageOfMeetingLocalizedDto {
    pageNum: number;
    pageSize: number;
    items: MeetingLocalizedDto[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfMeetingLocalizedDto {

        return new PageOfMeetingLocalizedDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(MeetingLocalizedDto.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export enum MeetingWorkflowActionDto {

        ToOpened = <any>'ToOpened',
        ToClosed = <any>'ToClosed',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === MeetingWorkflowActionDto) {
        return {
            name: 'MeetingWorkflowActionDto'
        };
    };
    return undefined;
});

export class MeetingParticipantDto extends EmployeeLocalizedDto {
    meeting: MeetingRefDto;
    roles: MeetingParticipantRoleDto2[];
    alternates: EmployeeLocalizedDto[];
    
    
    static fromJS(data: any): MeetingParticipantDto {

        return new MeetingParticipantDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.meeting = data['meeting'] ? MeetingRefDto.fromJS(data['meeting']) : null;
            this.roles = null;
            if (data['roles'] && data['roles'].constructor === Array) {
                this.roles = [];
                for (let item of data['roles'])
                    this.roles.push(item);
            }
            this.alternates = null;
            if (data['alternates'] && data['alternates'].constructor === Array) {
                this.alternates = [];
                for (let item of data['alternates'])
                    this.alternates.push(EmployeeLocalizedDto.fromJS(item));
            }

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['meeting'] = this.meeting ? this.meeting.toJS() : null;
        if (this.roles && this.roles.constructor === Array) {
            data['roles'] = [];
            for (let item of this.roles)
                data['roles'].push(item);
        }
        if (this.alternates && this.alternates.constructor === Array) {
            data['alternates'] = [];
            for (let item of this.alternates)
                data['alternates'].push(item.toJS());
        }

        super.toJS(data);
        return data;
    }
}

export class MeetingRefDto {
    id: string;
    
    
    static fromJS(data: any): MeetingRefDto {

        return new MeetingRefDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export enum MeetingParticipantRoleDto {

        Head = <any>'Head',
        Secretary = <any>'Secretary',
        RegularMember = <any>'RegularMember',
        InvitedPerson = <any>'InvitedPerson',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === MeetingParticipantRoleDto) {
        return {
            name: 'MeetingParticipantRoleDto'
        };
    };
    return undefined;
});

export class HoldingDto extends HoldingRefDto {
    name: string;
    
    
    static fromJS(data: any): HoldingDto {

        return new HoldingDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.name = data['name'] !== undefined ? data['name'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['name'] = this.name !== undefined ? this.name : null;

        super.toJS(data);
        return data;
    }
}

export class VotingsFilterDto extends PageFilterDto {
    meetingId: string;
    decisionProjectId: string;
    issueId: string;
    
    
    static fromJS(data: any): VotingsFilterDto {

        return new VotingsFilterDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.meetingId = data['meetingId'] !== undefined ? data['meetingId'] : null;
            this.decisionProjectId = data['decisionProjectId'] !== undefined ? data['decisionProjectId'] : null;
            this.issueId = data['issueId'] !== undefined ? data['issueId'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['meetingId'] = this.meetingId !== undefined ? this.meetingId : null;
        data['decisionProjectId'] = this.decisionProjectId !== undefined ? this.decisionProjectId : null;
        data['issueId'] = this.issueId !== undefined ? this.issueId : null;

        super.toJS(data);
        return data;
    }
}

export class PageOfVotingDto {
    pageNum: number;
    pageSize: number;
    items: VotingDto[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfVotingDto {

        return new PageOfVotingDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(VotingDto.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class VotingDto {
    id: string;
    meeting: MeetingRefDto;
    subject: MaterialVersionRefDto;
    closed: boolean;
    vetoApplied: boolean;
    votesFor: number;
    votesAbstain: number;
    votesAgainst: number;
    
    
    static fromJS(data: any): VotingDto {

        return new VotingDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.meeting = data['meeting'] ? MeetingRefDto.fromJS(data['meeting']) : null;
            this.subject = data['subject'] ? MaterialVersionRefDto.fromJS(data['subject']) : null;
            this.closed = data['closed'] !== undefined ? data['closed'] : null;
            this.vetoApplied = data['vetoApplied'] !== undefined ? data['vetoApplied'] : null;
            this.votesFor = data['votesFor'] !== undefined ? data['votesFor'] : null;
            this.votesAbstain = data['votesAbstain'] !== undefined ? data['votesAbstain'] : null;
            this.votesAgainst = data['votesAgainst'] !== undefined ? data['votesAgainst'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['meeting'] = this.meeting ? this.meeting.toJS() : null;
        data['subject'] = this.subject ? this.subject.toJS() : null;
        data['closed'] = this.closed !== undefined ? this.closed : null;
        data['vetoApplied'] = this.vetoApplied !== undefined ? this.vetoApplied : null;
        data['votesFor'] = this.votesFor !== undefined ? this.votesFor : null;
        data['votesAbstain'] = this.votesAbstain !== undefined ? this.votesAbstain : null;
        data['votesAgainst'] = this.votesAgainst !== undefined ? this.votesAgainst : null;

        
        return data;
    }
}

export class MaterialVersionRefDto {
    id: string;
    num: number;
    
    
    static fromJS(data: any): MaterialVersionRefDto {

        return new MaterialVersionRefDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.num = data['num'] !== undefined ? data['num'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['num'] = this.num !== undefined ? this.num : null;

        
        return data;
    }
}

export class CreateVotingDto {
    meeting: VotingMeetingDto;
    decisionProject: VotingDecisionProjectDto;
    
    
    static fromJS(data: any): CreateVotingDto {

        return new CreateVotingDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.meeting = data['meeting'] ? VotingMeetingDto.fromJS(data['meeting']) : null;
            this.decisionProject = data['decisionProject'] ? VotingDecisionProjectDto.fromJS(data['decisionProject']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['meeting'] = this.meeting ? this.meeting.toJS() : null;
        data['decisionProject'] = this.decisionProject ? this.decisionProject.toJS() : null;

        
        return data;
    }
}

export class VotingMeetingDto {
    id: string;
    
    
    static fromJS(data: any): VotingMeetingDto {

        return new VotingMeetingDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export class VotingDecisionProjectDto {
    id: string;
    version: number;
    
    
    static fromJS(data: any): VotingDecisionProjectDto {

        return new VotingDecisionProjectDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.version = data['version'] !== undefined ? data['version'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['version'] = this.version !== undefined ? this.version : null;

        
        return data;
    }
}

export class VoteDto {
    voting: VotingRefDto;
    owner: EmployeeLocalizedDto;
    createdBy: EmployeeLocalizedDto;
    createdAt: Date;
    type: VoteTypeDto;
    comment: string;
    
    
    static fromJS(data: any): VoteDto {

        return new VoteDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.voting = data['voting'] ? VotingRefDto.fromJS(data['voting']) : null;
            this.owner = data['owner'] ? EmployeeLocalizedDto.fromJS(data['owner']) : null;
            this.createdBy = data['createdBy'] ? EmployeeLocalizedDto.fromJS(data['createdBy']) : null;
            this.createdAt = data['createdAt'] ? new Date(data['createdAt'].toString()) : null;
            this.type = data['type'] !== undefined ? data['type'] : null;
            this.comment = data['comment'] !== undefined ? data['comment'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['voting'] = this.voting ? this.voting.toJS() : null;
        data['owner'] = this.owner ? this.owner.toJS() : null;
        data['createdBy'] = this.createdBy ? this.createdBy.toJS() : null;
        data['createdAt'] = this.createdAt ? this.createdAt.toISOString() : null;
        data['type'] = this.type !== undefined ? this.type : null;
        data['comment'] = this.comment !== undefined ? this.comment : null;

        
        return data;
    }
}

export class VotingRefDto {
    id: string;
    
    
    static fromJS(data: any): VotingRefDto {

        return new VotingRefDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export enum VoteTypeDto {

        For = <any>'For',
        Against = <any>'Against',
        Abstain = <any>'Abstain',
        Veto = <any>'Veto',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === VoteTypeDto) {
        return {
            name: 'VoteTypeDto'
        };
    };
    return undefined;
});

export class CreateVoteDto {
    type: VoteTypeDto;
    owner: EmployeeLocalizedDto;
    comment: string;
    
    
    static fromJS(data: any): CreateVoteDto {

        return new CreateVoteDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.type = data['type'] !== undefined ? data['type'] : null;
            this.owner = data['owner'] ? EmployeeLocalizedDto.fromJS(data['owner']) : null;
            this.comment = data['comment'] !== undefined ? data['comment'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['type'] = this.type !== undefined ? this.type : null;
        data['owner'] = this.owner ? this.owner.toJS() : null;
        data['comment'] = this.comment !== undefined ? this.comment : null;

        
        return data;
    }
}

export class CollegialBodyDto {
    id: string;
    name: string;
    
    
    static fromJS(data: any): CollegialBodyDto {

        return new CollegialBodyDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.name = data['name'] !== undefined ? data['name'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['name'] = this.name !== undefined ? this.name : null;

        
        return data;
    }
}

export class MaterialsFolderContentsDto2 {
    subFolders: MaterialsFolderDto2[];
    materials: IssueMaterialLocalizedDto2[];
    
    
    static fromJS(data: any): MaterialsFolderContentsDto2 {

        return new MaterialsFolderContentsDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.subFolders = null;
            if (data['subFolders'] && data['subFolders'].constructor === Array) {
                this.subFolders = [];
                for (let item of data['subFolders'])
                    this.subFolders.push(MaterialsFolderDto2.fromJS(item));
            }
            this.materials = null;
            if (data['materials'] && data['materials'].constructor === Array) {
                this.materials = [];
                for (let item of data['materials'])
                    this.materials.push(IssueMaterialLocalizedDto2.fromJS(item));
            }

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        if (this.subFolders && this.subFolders.constructor === Array) {
            data['subFolders'] = [];
            for (let item of this.subFolders)
                data['subFolders'].push(item.toJS());
        }
        if (this.materials && this.materials.constructor === Array) {
            data['materials'] = [];
            for (let item of this.materials)
                data['materials'].push(item.toJS());
        }

        
        return data;
    }
}

export class MaterialsFolderDto2 {
    name: string;
    location: string;
    
    
    static fromJS(data: any): MaterialsFolderDto2 {

        return new MaterialsFolderDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.name = data['name'] !== undefined ? data['name'] : null;
            this.location = data['location'] !== undefined ? data['location'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['name'] = this.name !== undefined ? this.name : null;
        data['location'] = this.location !== undefined ? this.location : null;

        
        return data;
    }
}

export class IssueMaterialLocalizedDto2 {
    id: string;
    type: string;
    name: string;
    location: string;
    currentVersion: IssueMaterialVersionLocalizedDto2;
    
    
    static fromJS(data: any): IssueMaterialLocalizedDto2 {

        return new IssueMaterialLocalizedDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.type = data['type'] !== undefined ? data['type'] : null;
            this.name = data['name'] !== undefined ? data['name'] : null;
            this.location = data['location'] !== undefined ? data['location'] : null;
            this.currentVersion = data['currentVersion'] ? IssueMaterialVersionLocalizedDto2.fromJS(data['currentVersion']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['type'] = this.type !== undefined ? this.type : null;
        data['name'] = this.name !== undefined ? this.name : null;
        data['location'] = this.location !== undefined ? this.location : null;
        data['currentVersion'] = this.currentVersion ? this.currentVersion.toJS() : null;

        
        return data;
    }
}

export class IssueMaterialVersionLocalizedDto2 {
    num: number;
    fileName: string;
    createdBy: EmployeeDto2;
    createdAt: Date;
    
    
    static fromJS(data: any): IssueMaterialVersionLocalizedDto2 {

        return new IssueMaterialVersionLocalizedDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.fileName = data['fileName'] !== undefined ? data['fileName'] : null;
            this.createdBy = data['createdBy'] ? EmployeeDto2.fromJS(data['createdBy']) : null;
            this.createdAt = data['createdAt'] ? new Date(data['createdAt'].toString()) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['num'] = this.num !== undefined ? this.num : null;
        data['fileName'] = this.fileName !== undefined ? this.fileName : null;
        data['createdBy'] = this.createdBy ? this.createdBy.toJS() : null;
        data['createdAt'] = this.createdAt ? this.createdAt.toISOString() : null;

        
        return data;
    }
}

export class EmployeeDto2 {
    id: string;
    pictureUrl: string;
    firstName: string;
    lastName: string;
    middleName: string;
    
    
    static fromJS(data: any): EmployeeDto2 {

        return new EmployeeDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.pictureUrl = data['pictureUrl'] !== undefined ? data['pictureUrl'] : null;
            this.firstName = data['firstName'] !== undefined ? data['firstName'] : null;
            this.lastName = data['lastName'] !== undefined ? data['lastName'] : null;
            this.middleName = data['middleName'] !== undefined ? data['middleName'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['pictureUrl'] = this.pictureUrl !== undefined ? this.pictureUrl : null;
        data['firstName'] = this.firstName !== undefined ? this.firstName : null;
        data['lastName'] = this.lastName !== undefined ? this.lastName : null;
        data['middleName'] = this.middleName !== undefined ? this.middleName : null;

        
        return data;
    }
}

export class DecisionProjectDto2 extends IssueMaterialLocalizedDto2 {
    accepted: boolean;
    
    
    static fromJS(data: any): DecisionProjectDto2 {

        return new DecisionProjectDto2(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.accepted = data['accepted'] !== undefined ? data['accepted'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['accepted'] = this.accepted !== undefined ? this.accepted : null;

        super.toJS(data);
        return data;
    }
}

export class IssuesFilterDto2 extends PageFilterDto {
    collegialBodyId: string;
    title: string;
    labels: string;
    from: Date;
    to: Date;
    speaker: string;
    
    
    static fromJS(data: any): IssuesFilterDto2 {

        return new IssuesFilterDto2(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.collegialBodyId = data['collegialBodyId'] !== undefined ? data['collegialBodyId'] : null;
            this.title = data['title'] !== undefined ? data['title'] : null;
            this.labels = data['labels'] !== undefined ? data['labels'] : null;
            this.from = data['from'] ? new Date(data['from'].toString()) : null;
            this.to = data['to'] ? new Date(data['to'].toString()) : null;
            this.speaker = data['speaker'] !== undefined ? data['speaker'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['collegialBodyId'] = this.collegialBodyId !== undefined ? this.collegialBodyId : null;
        data['title'] = this.title !== undefined ? this.title : null;
        data['labels'] = this.labels !== undefined ? this.labels : null;
        data['from'] = this.from ? this.from.toISOString() : null;
        data['to'] = this.to ? this.to.toISOString() : null;
        data['speaker'] = this.speaker !== undefined ? this.speaker : null;

        super.toJS(data);
        return data;
    }
}

export class PageOfIssueDto {
    pageNum: number;
    pageSize: number;
    items: IssueDto2[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfIssueDto {

        return new PageOfIssueDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(IssueDto2.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class IssueDto2 {
    id: string;
    title: string;
    description: string;
    estimate: string;
    currentMeeting: MeetingDto2;
    
    
    static fromJS(data: any): IssueDto2 {

        return new IssueDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.title = data['title'] !== undefined ? data['title'] : null;
            this.description = data['description'] !== undefined ? data['description'] : null;
            this.estimate = data['estimate'] !== undefined ? data['estimate'] : null;
            this.currentMeeting = data['currentMeeting'] ? MeetingDto2.fromJS(data['currentMeeting']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['title'] = this.title !== undefined ? this.title : null;
        data['description'] = this.description !== undefined ? this.description : null;
        data['estimate'] = this.estimate !== undefined ? this.estimate : null;
        data['currentMeeting'] = this.currentMeeting ? this.currentMeeting.toJS() : null;

        
        return data;
    }
}

export class MeetingDto2 {
    id: string;
    num: string;
    status: MeetingStatusDto;
    date: Date;
    resolution: ResolutionDto;
    voting: VotingStatisticsDto;
    speakers: EmployeeDto2[];
    collegialBody: CollegialBodyDto;
    
    
    static fromJS(data: any): MeetingDto2 {

        return new MeetingDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.status = data['status'] !== undefined ? data['status'] : null;
            this.date = data['date'] ? new Date(data['date'].toString()) : null;
            this.resolution = data['resolution'] ? ResolutionDto.fromJS(data['resolution']) : null;
            this.voting = data['voting'] ? VotingStatisticsDto.fromJS(data['voting']) : null;
            this.speakers = null;
            if (data['speakers'] && data['speakers'].constructor === Array) {
                this.speakers = [];
                for (let item of data['speakers'])
                    this.speakers.push(EmployeeDto2.fromJS(item));
            }
            this.collegialBody = data['collegialBody'] ? CollegialBodyDto.fromJS(data['collegialBody']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['num'] = this.num !== undefined ? this.num : null;
        data['status'] = this.status !== undefined ? this.status : null;
        data['date'] = this.date ? this.date.toISOString() : null;
        data['resolution'] = this.resolution ? this.resolution.toJS() : null;
        data['voting'] = this.voting ? this.voting.toJS() : null;
        if (this.speakers && this.speakers.constructor === Array) {
            data['speakers'] = [];
            for (let item of this.speakers)
                data['speakers'].push(item.toJS());
        }
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;

        
        return data;
    }
}

export enum MeetingStatusDto {

        Draft = <any>'Draft',
        Opened = <any>'Opened',
        Closed = <any>'Closed',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === MeetingStatusDto) {
        return {
            name: 'MeetingStatusDto'
        };
    };
    return undefined;
});

export class ResolutionDto {
    approved: number;
    declined: number;
    
    
    static fromJS(data: any): ResolutionDto {

        return new ResolutionDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.approved = data['approved'] !== undefined ? data['approved'] : null;
            this.declined = data['declined'] !== undefined ? data['declined'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['approved'] = this.approved !== undefined ? this.approved : null;
        data['declined'] = this.declined !== undefined ? this.declined : null;

        
        return data;
    }
}

export class VotingStatisticsDto {
    id: string;
    for: number;
    against: number;
    abstain: number;
    veto: number;
    
    
    static fromJS(data: any): VotingStatisticsDto {

        return new VotingStatisticsDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.for = data['for'] !== undefined ? data['for'] : null;
            this.against = data['against'] !== undefined ? data['against'] : null;
            this.abstain = data['abstain'] !== undefined ? data['abstain'] : null;
            this.veto = data['veto'] !== undefined ? data['veto'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['for'] = this.for !== undefined ? this.for : null;
        data['against'] = this.against !== undefined ? this.against : null;
        data['abstain'] = this.abstain !== undefined ? this.abstain : null;
        data['veto'] = this.veto !== undefined ? this.veto : null;

        
        return data;
    }
}

export class IssueWithDetailsDto {
    id: string;
    collegialBody: CollegialBodyDto;
    author: EmployeeDto2;
    title: string;
    description: string;
    labels: LabelDto2[];
    estimate: string;
    status: string;
    
    
    static fromJS(data: any): IssueWithDetailsDto {

        return new IssueWithDetailsDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.collegialBody = data['collegialBody'] ? CollegialBodyDto.fromJS(data['collegialBody']) : null;
            this.author = data['author'] ? EmployeeDto2.fromJS(data['author']) : null;
            this.title = data['title'] !== undefined ? data['title'] : null;
            this.description = data['description'] !== undefined ? data['description'] : null;
            this.labels = null;
            if (data['labels'] && data['labels'].constructor === Array) {
                this.labels = [];
                for (let item of data['labels'])
                    this.labels.push(LabelDto2.fromJS(item));
            }
            this.estimate = data['estimate'] !== undefined ? data['estimate'] : null;
            this.status = data['status'] !== undefined ? data['status'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['author'] = this.author ? this.author.toJS() : null;
        data['title'] = this.title !== undefined ? this.title : null;
        data['description'] = this.description !== undefined ? this.description : null;
        if (this.labels && this.labels.constructor === Array) {
            data['labels'] = [];
            for (let item of this.labels)
                data['labels'].push(item.toJS());
        }
        data['estimate'] = this.estimate !== undefined ? this.estimate : null;
        data['status'] = this.status !== undefined ? this.status : null;

        
        return data;
    }
}

export class LabelDto2 {
    id: string;
    name: string;
    
    
    static fromJS(data: any): LabelDto2 {

        return new LabelDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.name = data['name'] !== undefined ? data['name'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['name'] = this.name !== undefined ? this.name : null;

        
        return data;
    }
}

export class MeetingLocalizedDto2 {
    id: string;
    num: string;
    collegialBody: CollegialBodyDto;
    status: MeetingStatusDto;
    voting: VotingStatisticsDto;
    hasProtocol: boolean;
    
    
    static fromJS(data: any): MeetingLocalizedDto2 {

        return new MeetingLocalizedDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.collegialBody = data['collegialBody'] ? CollegialBodyDto.fromJS(data['collegialBody']) : null;
            this.status = data['status'] !== undefined ? data['status'] : null;
            this.voting = data['voting'] ? VotingStatisticsDto.fromJS(data['voting']) : null;
            this.hasProtocol = data['hasProtocol'] !== undefined ? data['hasProtocol'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['num'] = this.num !== undefined ? this.num : null;
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['status'] = this.status !== undefined ? this.status : null;
        data['voting'] = this.voting ? this.voting.toJS() : null;
        data['hasProtocol'] = this.hasProtocol !== undefined ? this.hasProtocol : null;

        
        return data;
    }
}

export class MeetingInPresentiaLocalizedDto2 extends MeetingLocalizedDto2 {
    date: Date;
    
    
    static fromJS(data: any): MeetingInPresentiaLocalizedDto2 {

        return new MeetingInPresentiaLocalizedDto2(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.date = data['date'] ? new Date(data['date'].toString()) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['date'] = this.date ? this.date.toISOString() : null;

        super.toJS(data);
        return data;
    }
}

export class MeetingInAbsentiaLocalizedDto2 extends MeetingLocalizedDto2 {
    startDate: Date;
    endDate: Date;
    
    
    static fromJS(data: any): MeetingInAbsentiaLocalizedDto2 {

        return new MeetingInAbsentiaLocalizedDto2(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.startDate = data['startDate'] ? new Date(data['startDate'].toString()) : null;
            this.endDate = data['endDate'] ? new Date(data['endDate'].toString()) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['startDate'] = this.startDate ? this.startDate.toISOString() : null;
        data['endDate'] = this.endDate ? this.endDate.toISOString() : null;

        super.toJS(data);
        return data;
    }
}

export class MeetingDetailDto {
    id: string;
    num: string;
    status: MeetingStatusDto;
    type: MeetingType;
    date: Date;
    address: string;
    place: string;
    head: EmployeeDto2;
    secretary: EmployeeDto2;
    agenda: AgendaItemDto[];
    participants: MeetingMemberDto[];
    collegialBody: CollegialBodyDto;
    hasProtocol: boolean;
    
    
    static fromJS(data: any): MeetingDetailDto {

        return new MeetingDetailDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.status = data['status'] !== undefined ? data['status'] : null;
            this.type = data['type'] !== undefined ? data['type'] : null;
            this.date = data['date'] ? new Date(data['date'].toString()) : null;
            this.address = data['address'] !== undefined ? data['address'] : null;
            this.place = data['place'] !== undefined ? data['place'] : null;
            this.head = data['head'] ? EmployeeDto2.fromJS(data['head']) : null;
            this.secretary = data['secretary'] ? EmployeeDto2.fromJS(data['secretary']) : null;
            this.agenda = null;
            if (data['agenda'] && data['agenda'].constructor === Array) {
                this.agenda = [];
                for (let item of data['agenda'])
                    this.agenda.push(AgendaItemDto.fromJS(item));
            }
            this.participants = null;
            if (data['participants'] && data['participants'].constructor === Array) {
                this.participants = [];
                for (let item of data['participants'])
                    this.participants.push(MeetingMemberDto.fromJS(item));
            }
            this.collegialBody = data['collegialBody'] ? CollegialBodyDto.fromJS(data['collegialBody']) : null;
            this.hasProtocol = data['hasProtocol'] !== undefined ? data['hasProtocol'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['num'] = this.num !== undefined ? this.num : null;
        data['status'] = this.status !== undefined ? this.status : null;
        data['type'] = this.type !== undefined ? this.type : null;
        data['date'] = this.date ? this.date.toISOString() : null;
        data['address'] = this.address !== undefined ? this.address : null;
        data['place'] = this.place !== undefined ? this.place : null;
        data['head'] = this.head ? this.head.toJS() : null;
        data['secretary'] = this.secretary ? this.secretary.toJS() : null;
        if (this.agenda && this.agenda.constructor === Array) {
            data['agenda'] = [];
            for (let item of this.agenda)
                data['agenda'].push(item.toJS());
        }
        if (this.participants && this.participants.constructor === Array) {
            data['participants'] = [];
            for (let item of this.participants)
                data['participants'].push(item.toJS());
        }
        data['collegialBody'] = this.collegialBody ? this.collegialBody.toJS() : null;
        data['hasProtocol'] = this.hasProtocol !== undefined ? this.hasProtocol : null;

        
        return data;
    }
}

export enum MeetingType {

        Presentia = <any>'Presentia',
        Absentia = <any>'Absentia',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === MeetingType) {
        return {
            name: 'MeetingType'
        };
    };
    return undefined;
});

export class AgendaItemDto {
    id: string;
    order: number;
    title: string;
    description: string;
    author: EmployeeDto2;
    speaker: EmployeeDto2;
    status: AgendaItemState;
    voting: VotingStatisticsDto;
    decision: DecisionDto;
    
    
    static fromJS(data: any): AgendaItemDto {

        return new AgendaItemDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.order = data['order'] !== undefined ? data['order'] : null;
            this.title = data['title'] !== undefined ? data['title'] : null;
            this.description = data['description'] !== undefined ? data['description'] : null;
            this.author = data['author'] ? EmployeeDto2.fromJS(data['author']) : null;
            this.speaker = data['speaker'] ? EmployeeDto2.fromJS(data['speaker']) : null;
            this.status = data['status'] !== undefined ? data['status'] : null;
            this.voting = data['voting'] ? VotingStatisticsDto.fromJS(data['voting']) : null;
            this.decision = data['decision'] ? DecisionDto.fromJS(data['decision']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['order'] = this.order !== undefined ? this.order : null;
        data['title'] = this.title !== undefined ? this.title : null;
        data['description'] = this.description !== undefined ? this.description : null;
        data['author'] = this.author ? this.author.toJS() : null;
        data['speaker'] = this.speaker ? this.speaker.toJS() : null;
        data['status'] = this.status !== undefined ? this.status : null;
        data['voting'] = this.voting ? this.voting.toJS() : null;
        data['decision'] = this.decision ? this.decision.toJS() : null;

        
        return data;
    }
}

export enum AgendaItemState {

        WaitingForConsideration = <any>'WaitingForConsideration',
        OnConsideration = <any>'OnConsideration',
        OnVoting = <any>'OnVoting',
        OnFormalization = <any>'OnFormalization',
        Resolved = <any>'Resolved',
        OnModification = <any>'OnModification',
        Removed = <any>'Removed',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === AgendaItemState) {
        return {
            name: 'AgendaItemState'
        };
    };
    return undefined;
});

export class DecisionDto {
    id: string;
    accepted: boolean;
    
    
    static fromJS(data: any): DecisionDto {

        return new DecisionDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.accepted = data['accepted'] !== undefined ? data['accepted'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['accepted'] = this.accepted !== undefined ? this.accepted : null;

        
        return data;
    }
}

export class MeetingMemberDto extends EmployeeDto2 {
    role: MeetingMemberType;
    
    
    static fromJS(data: any): MeetingMemberDto {

        return new MeetingMemberDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.role = data['role'] !== undefined ? data['role'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['role'] = this.role !== undefined ? this.role : null;

        super.toJS(data);
        return data;
    }
}

export enum MeetingMemberType {

        CollegialBodyMember = <any>'CollegialBodyMember',
        InvitedOnMeeting = <any>'InvitedOnMeeting',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === MeetingMemberType) {
        return {
            name: 'MeetingMemberType'
        };
    };
    return undefined;
});

export class MeetingsFilterDto2 extends PageFilterDto {
    collegialBodyId: string;
    num: string;
    from: Date;
    to: Date;
    
    
    static fromJS(data: any): MeetingsFilterDto2 {

        return new MeetingsFilterDto2(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.collegialBodyId = data['collegialBodyId'] !== undefined ? data['collegialBodyId'] : null;
            this.num = data['num'] !== undefined ? data['num'] : null;
            this.from = data['from'] ? new Date(data['from'].toString()) : null;
            this.to = data['to'] ? new Date(data['to'].toString()) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['collegialBodyId'] = this.collegialBodyId !== undefined ? this.collegialBodyId : null;
        data['num'] = this.num !== undefined ? this.num : null;
        data['from'] = this.from ? this.from.toISOString() : null;
        data['to'] = this.to ? this.to.toISOString() : null;

        super.toJS(data);
        return data;
    }
}

export class PageOfMeetingLocalizedDto2 {
    pageNum: number;
    pageSize: number;
    items: MeetingLocalizedDto2[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfMeetingLocalizedDto2 {

        return new PageOfMeetingLocalizedDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(MeetingLocalizedDto2.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class VotingsFilterDto2 extends PageFilterDto {
    meetingId: string;
    issueId: string;
    
    
    static fromJS(data: any): VotingsFilterDto2 {

        return new VotingsFilterDto2(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.meetingId = data['meetingId'] !== undefined ? data['meetingId'] : null;
            this.issueId = data['issueId'] !== undefined ? data['issueId'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['meetingId'] = this.meetingId !== undefined ? this.meetingId : null;
        data['issueId'] = this.issueId !== undefined ? this.issueId : null;

        super.toJS(data);
        return data;
    }
}

export class PageOfVotingDto2 {
    pageNum: number;
    pageSize: number;
    items: VotingDto2[];
    itemsTotal: number;
    
    
    static fromJS(data: any): PageOfVotingDto2 {

        return new PageOfVotingDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.pageNum = data['pageNum'] !== undefined ? data['pageNum'] : null;
            this.pageSize = data['pageSize'] !== undefined ? data['pageSize'] : null;
            this.items = null;
            if (data['items'] && data['items'].constructor === Array) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(VotingDto2.fromJS(item));
            }
            this.itemsTotal = data['itemsTotal'] !== undefined ? data['itemsTotal'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['pageNum'] = this.pageNum !== undefined ? this.pageNum : null;
        data['pageSize'] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJS());
        }
        data['itemsTotal'] = this.itemsTotal !== undefined ? this.itemsTotal : null;

        
        return data;
    }
}

export class VotingDto2 {
    id: string;
    meeting: MeetingRefDto2;
    decisionProject: IssueMaterialVersionRefDto;
    isClosed: boolean;
    vetoApplied: boolean;
    votes: VoteDto2[];
    
    
    static fromJS(data: any): VotingDto2 {

        return new VotingDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.meeting = data['meeting'] ? MeetingRefDto2.fromJS(data['meeting']) : null;
            this.decisionProject = data['decisionProject'] ? IssueMaterialVersionRefDto.fromJS(data['decisionProject']) : null;
            this.isClosed = data['isClosed'] !== undefined ? data['isClosed'] : null;
            this.vetoApplied = data['vetoApplied'] !== undefined ? data['vetoApplied'] : null;
            this.votes = null;
            if (data['votes'] && data['votes'].constructor === Array) {
                this.votes = [];
                for (let item of data['votes'])
                    this.votes.push(VoteDto2.fromJS(item));
            }

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['meeting'] = this.meeting ? this.meeting.toJS() : null;
        data['decisionProject'] = this.decisionProject ? this.decisionProject.toJS() : null;
        data['isClosed'] = this.isClosed !== undefined ? this.isClosed : null;
        data['vetoApplied'] = this.vetoApplied !== undefined ? this.vetoApplied : null;
        if (this.votes && this.votes.constructor === Array) {
            data['votes'] = [];
            for (let item of this.votes)
                data['votes'].push(item.toJS());
        }

        
        return data;
    }
}

export class MeetingRefDto2 {
    id: string;
    
    
    static fromJS(data: any): MeetingRefDto2 {

        return new MeetingRefDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export class MaterialVersionRefDto2 {
    id: string;
    version: number;
    
    
    static fromJS(data: any): MaterialVersionRefDto2 {

        return new MaterialVersionRefDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;
            this.version = data['version'] !== undefined ? data['version'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;
        data['version'] = this.version !== undefined ? this.version : null;

        
        return data;
    }
}

export class IssueMaterialVersionRefDto extends MaterialVersionRefDto2 {
    issue: IssueRefDto;
    
    
    static fromJS(data: any): IssueMaterialVersionRefDto {

        return new IssueMaterialVersionRefDto(data);
    }

    constructor(data?: any) {
        super(data);
        if (data !== undefined) {
            this.issue = data['issue'] ? IssueRefDto.fromJS(data['issue']) : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['issue'] = this.issue ? this.issue.toJS() : null;

        super.toJS(data);
        return data;
    }
}

export class IssueRefDto {
    id: string;
    
    
    static fromJS(data: any): IssueRefDto {

        return new IssueRefDto(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.id = data['id'] !== undefined ? data['id'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['id'] = this.id !== undefined ? this.id : null;

        
        return data;
    }
}

export class VoteDto2 {
    owner: EmployeeDto2;
    createdBy: EmployeeDto2;
    createdAt: Date;
    type: VoteTypeDto2;
    comment: string;
    
    
    static fromJS(data: any): VoteDto2 {

        return new VoteDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.owner = data['owner'] ? EmployeeDto2.fromJS(data['owner']) : null;
            this.createdBy = data['createdBy'] ? EmployeeDto2.fromJS(data['createdBy']) : null;
            this.createdAt = data['createdAt'] ? new Date(data['createdAt'].toString()) : null;
            this.type = data['type'] !== undefined ? data['type'] : null;
            this.comment = data['comment'] !== undefined ? data['comment'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['owner'] = this.owner ? this.owner.toJS() : null;
        data['createdBy'] = this.createdBy ? this.createdBy.toJS() : null;
        data['createdAt'] = this.createdAt ? this.createdAt.toISOString() : null;
        data['type'] = this.type !== undefined ? this.type : null;
        data['comment'] = this.comment !== undefined ? this.comment : null;

        
        return data;
    }
}

export enum VoteTypeDto2 {

        For = <any>'For',
        Against = <any>'Against',
        Abstain = <any>'Abstain',
        Veto = <any>'Veto',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === VoteTypeDto2) {
        return {
            name: 'VoteTypeDto2'
        };
    };
    return undefined;
});

export class CreateVoteDto2 {
    type: VoteTypeDto2;
    owner: EmployeeLocalizedDto;
    comment: string;
    
    
    static fromJS(data: any): CreateVoteDto2 {

        return new CreateVoteDto2(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {
            this.type = data['type'] !== undefined ? data['type'] : null;
            this.owner = data['owner'] ? EmployeeLocalizedDto.fromJS(data['owner']) : null;
            this.comment = data['comment'] !== undefined ? data['comment'] : null;

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        
        data['type'] = this.type !== undefined ? this.type : null;
        data['owner'] = this.owner ? this.owner.toJS() : null;
        data['comment'] = this.comment !== undefined ? this.comment : null;

        
        return data;
    }
}

export class Ref_33326149_f9d3_4ab1_9c97_f9f3b9dbeefb {

    
    
    static fromJS(data: any): Ref_33326149_f9d3_4ab1_9c97_f9f3b9dbeefb {

        return new Ref_33326149_f9d3_4ab1_9c97_f9f3b9dbeefb(data);
    }

    constructor(data?: any) {
        
        if (data !== undefined) {

        }
        
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        

        
        return data;
    }
}

export enum AgendaItemParticipantRoleDto2 {

        CollegialBodyMember = <any>'CollegialBodyMember',
        InvitedOnMeeting = <any>'InvitedOnMeeting',
        Speaker = <any>'Speaker',
        InvitedOnIssue = <any>'InvitedOnIssue',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === AgendaItemParticipantRoleDto2) {
        return {
            name: 'AgendaItemParticipantRoleDto2'
        };
    };
    return undefined;
});

export enum MeetingParticipantRoleDto2 {

        Head = <any>'Head',
        Secretary = <any>'Secretary',
        RegularMember = <any>'RegularMember',
        InvitedPerson = <any>'InvitedPerson',
}
enumMetadataProviders.push(function(en: any): EnumMetadata {
    if (en === MeetingParticipantRoleDto2) {
        return {
            name: 'MeetingParticipantRoleDto2'
        };
    };
    return undefined;
});

export function enumMetadata(en: any): EnumMetadata {
    for (let i = 0; i < enumMetadataProviders.length; i++) {
        let meta = enumMetadataProviders[i](en);
        if (meta !== undefined) {
            return meta;
        }
    }
    return undefined;
}
